# ScooterDomain Project
==================================================
// ==== ScooterDomain.csproj ====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DocumentFormat.OpenXml" Version="3.3.0" />
    <PackageReference Include="DocumentFormat.OpenXml.Framework" Version="3.3.0" />
    <PackageReference Include="EPPlus" Version="7.7.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Cookies" Version="2.3.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authorization" Version="9.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.3.1" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.3" />
  </ItemGroup>

</Project>


// ==== Model\ApplicationUser.cs ====
using Microsoft.AspNetCore.Identity;

namespace ScooterDomain.Model
{
    public class ApplicationUser : IdentityUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int? RiderId { get; set; }
        public Rider Rider { get; set; }

    }
}

// ==== Model\ChargingStation.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class ChargingStation : Entity, IValidatableObject
{
    [Required(ErrorMessage = "Поле \"Назва\" обов'язкове для заповнення")]
    [Display(Name = "Назва")]
    [StringLength(100, ErrorMessage = "Назва не може бути довшою за 100 символів")]
    public string Name { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Розташування\" обов'язкове для заповнення")]
    [Display(Name = "Розташування")]
    [StringLength(255, ErrorMessage = "Розташування не може бути довшим за 255 символів")]
    public string Location { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Кількість слотів\" обов'язкове для заповнення")]
    [Display(Name = "Кількість слотів")]
    [Range(1, int.MaxValue, ErrorMessage = "Кількість слотів має бути більшою за 0")]
    public int ChargingSlots { get; set; }

    [Required(ErrorMessage = "Поле \"Поточна кількість скутерів\" обов'язкове для заповнення")]
    [Display(Name = "Поточна кількість скутерів")]
    [Range(0, int.MaxValue, ErrorMessage = "Кількість скутерів не може бути від'ємною")]
    public int CurrentScooterCount { get; set; }

    public virtual ICollection<Scooter> Scooters { get; set; } = new List<Scooter>();

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        if (CurrentScooterCount > ChargingSlots)
        {
            yield return new ValidationResult(
                "Поточна кількість скутерів не може перевищувати кількість слотів.",
                new[] { nameof(CurrentScooterCount) });
        }
    }
}

// ==== Model\Discount.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class Discount : Entity
{
    [Required(ErrorMessage = "Поле \"Назва\" обов'язкове для заповнення")]
    [Display(Name = "Назва")]
    [StringLength(100, ErrorMessage = "Назва не може бути довшою за 100 символів")]
    public string Name { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Відсоток знижки\" обов'язкове для заповнення")]
    [Display(Name = "Відсоток знижки")]
    [Range(0, 100, ErrorMessage = "Відсоток знижки має бути від 0 до 100")]
    public decimal Percentage { get; set; }

    [Display(Name = "Опис")]
    public string? Description { get; set; }

    public virtual ICollection<Rider> Riders { get; set; } = new List<Rider>();
}

// ==== Model\Entity.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ScooterDomain.Model
{
    public abstract class Entity
    {
        public int Id { get; set; }
    }
}

// ==== Model\PaymentMethod.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class PaymentMethod : Entity
{
    [Required(ErrorMessage = "Поле \"Назва\" обов'язкове для заповнення")]
    [Display(Name = "Назва")]
    [StringLength(100, ErrorMessage = "Назва не може бути довшою за 100 символів")]
    public string Name { get; set; } = null!;

    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();
}

// ==== Model\Rental.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class Rental : Entity, IValidatableObject
{
    [Required(ErrorMessage = "Поле \"Користувач\" обов'язкове для заповнення")]
    [Display(Name = "Користувач")]
    public int RiderId { get; set; }

    [Required(ErrorMessage = "Поле \"Скутер\" обов'язкове для заповнення")]
    [Display(Name = "Скутер")]
    public int ScooterId { get; set; }

    [Required(ErrorMessage = "Поле \"Статус\" обов'язкове для заповнення")]
    [Display(Name = "Статус")]
    public int StatusId { get; set; }

    [Required(ErrorMessage = "Поле \"Час початку\" обов'язкове для заповнення")]
    [Display(Name = "Час початку")]
    [DataType(DataType.DateTime, ErrorMessage = "Введіть коректну дату та час")]
    public DateTime StartTime { get; set; }

    [Display(Name = "Час завершення")]
    [DataType(DataType.DateTime, ErrorMessage = "Введіть коректну дату та час")]
    public DateTime? EndTime { get; set; }

    [Required(ErrorMessage = "Поле \"Загальна вартість\" обов'язкове для заповнення")]
    [Display(Name = "Загальна вартість")]
    [Range(0, double.MaxValue, ErrorMessage = "Вартість не може бути від'ємною")]
    public decimal TotalCost { get; set; }

    [Display(Name = "Дата оплати")]
    [DataType(DataType.DateTime, ErrorMessage = "Введіть коректну дату та час")]
    public DateTime? PaymentDate { get; set; }

    [Display(Name = "Сума оплати")]
    [Range(0, double.MaxValue, ErrorMessage = "Сума не може бути від'ємною")]
    public decimal? Amount { get; set; }

    [Display(Name = "Спосіб оплати")]
    public int? PaymentMethodId { get; set; }

    public virtual PaymentMethod? PaymentMethod { get; set; }
    public virtual Rider Rider { get; set; } = null!;
    public virtual Scooter Scooter { get; set; } = null!;
    public virtual RentalStatus Status { get; set; } = null!;

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Статуси з RentalStatuses: 1 - Активна, 2 - Завершена, 3 - Скасована
        const int ActiveStatusId = 1;
        const int CompletedStatusId = 2;
        const int CancelledStatusId = 3;

        // Перевірка часу завершення
        if (EndTime.HasValue && EndTime <= StartTime)
        {
            yield return new ValidationResult(
                "Час завершення не може бути меншим або дорівнювати часу початку.",
                new[] { nameof(EndTime) });
        }

        if (StatusId == ActiveStatusId)
        {
            // Для статусу "Активна"
            if (EndTime.HasValue)
            {
                yield return new ValidationResult(
                    "Час завершення має бути відсутнім для активної оренди.",
                    new[] { nameof(EndTime) });
            }

            if (PaymentDate.HasValue)
            {
                yield return new ValidationResult(
                    "Дата оплати має бути відсутньою для активної оренди.",
                    new[] { nameof(PaymentDate) });
            }

            if (Amount.HasValue)
            {
                yield return new ValidationResult(
                    "Сума оплати має бути відсутньою для активної оренди.",
                    new[] { nameof(Amount) });
            }

            if (PaymentMethodId.HasValue)
            {
                yield return new ValidationResult(
                    "Спосіб оплати має бути відсутнім для активної оренди.",
                    new[] { nameof(PaymentMethodId) });
            }
        }
        else if (StatusId == CompletedStatusId)
        {
            // Для статусу "Завершена"
            if (!EndTime.HasValue)
            {
                yield return new ValidationResult(
                    "Час завершення обов'язковий для завершеної оренди.",
                    new[] { nameof(EndTime) });
            }

            if (!PaymentDate.HasValue)
            {
                yield return new ValidationResult(
                    "Дата оплати обов'язкова для завершеної оренди.",
                    new[] { nameof(PaymentDate) });
            }

            if (!Amount.HasValue)
            {
                yield return new ValidationResult(
                    "Сума оплати обов'язкова для завершеної оренди.",
                    new[] { nameof(Amount) });
            }

            if (!PaymentMethodId.HasValue)
            {
                yield return new ValidationResult(
                    "Спосіб оплати обов'язковий для завершеної оренди.",
                    new[] { nameof(PaymentMethodId) });
            }

            if (Amount.HasValue && Amount != TotalCost)
            {
                yield return new ValidationResult(
                    "Сума оплати має дорівнювати загальній вартості для завершеної оренди.",
                    new[] { nameof(Amount) });
            }

            if (TotalCost <= 0)
            {
                yield return new ValidationResult(
                    "Загальна вартість має бути більшою за 0 для завершеної оренди.",
                    new[] { nameof(TotalCost) });
            }
        }
        else if (StatusId == CancelledStatusId)
        {
            // Для статусу "Скасована"
            if (!EndTime.HasValue)
            {
                yield return new ValidationResult(
                    "Час завершення обов'язковий для скасованої оренди.",
                    new[] { nameof(EndTime) });
            }

            if (PaymentDate.HasValue)
            {
                yield return new ValidationResult(
                    "Дата оплати має бути відсутньою для скасованої оренди.",
                    new[] { nameof(PaymentDate) });
            }

            if (Amount.HasValue)
            {
                yield return new ValidationResult(
                    "Сума оплати має бути відсутньою для скасованої оренди.",
                    new[] { nameof(Amount) });
            }

            if (PaymentMethodId.HasValue)
            {
                yield return new ValidationResult(
                    "Спосіб оплати має бути відсутнім для скасованої оренди.",
                    new[] { nameof(PaymentMethodId) });
            }
        }
        else
        {
            yield return new ValidationResult(
                "Невірний статус оренди. Допустимі значення: Активна (1), Завершена (2), Скасована (3).",
                new[] { nameof(StatusId) });
        }
    }
}

// ==== Model\RentalStatus.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class RentalStatus : Entity
{
    [Required(ErrorMessage = "Поле \"Назва\" обов'язкове для заповнення")]
    [Display(Name = "Назва")]
    [StringLength(100, ErrorMessage = "Назва не може бути довшою за 100 символів")]
    public string Name { get; set; } = null!;

    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();
}

// ==== Model\Rider.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class Rider : Entity, IValidatableObject
{
    [Required(ErrorMessage = "Поле \"Ім'я\" обов'язкове для заповнення")]
    [Display(Name = "Ім'я")]
    [StringLength(50, MinimumLength = 2, ErrorMessage = "Ім'я має бути від 2 до 50 символів")]
    public string FirstName { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Прізвище\" обов'язкове для заповнення")]
    [Display(Name = "Прізвище")]
    [StringLength(50, MinimumLength = 2, ErrorMessage = "Прізвище має бути від 2 до 50 символів")]
    public string LastName { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Номер телефону\" обов'язкове для заповнення")]
    [Display(Name = "Номер телефону")]
    [Phone(ErrorMessage = "Введіть коректний номер телефону")]
    [RegularExpression(@"^\+?[1-9]\d{9,14}$", ErrorMessage = "Номер телефону має бути у форматі +380xxxxxxxxx")]
    public string PhoneNumber { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Дата реєстрації\" обов'язкове для заповнення")]
    [Display(Name = "Дата реєстрації")]
    [DataType(DataType.Date, ErrorMessage = "Введіть коректну дату")]
    public DateOnly RegistrationDate { get; set; }

    [Display(Name = "Баланс рахунку")]
    [Range(0, double.MaxValue, ErrorMessage = "Баланс не може бути від'ємним")]
    public decimal? AccountBalance { get; set; }

    public string? ApplicationUserId { get; set; } // Нове поле для зв'язку з ApplicationUser
    public ApplicationUser? ApplicationUser { get; set; } // Навігаційна властивість

    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();
    public virtual ICollection<Discount> Discounts { get; set; } = new List<Discount>();

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Визначаємо мінімальну допустиму дату (наприклад, 01.01.2000)
        var minDate = new DateOnly(2000, 1, 1);
        // Поточна дата (на момент валідації)
        var maxDate = DateOnly.FromDateTime(DateTime.Now);

        // Перевірка, чи дата не занадто в минулому
        if (RegistrationDate < minDate)
        {
            yield return new ValidationResult(
                $"Дата реєстрації не може бути раніше {minDate:dd.MM.yyyy}.",
                new[] { nameof(RegistrationDate) });
        }

        // Перевірка, чи дата не в майбутньому
        if (RegistrationDate > maxDate)
        {
            yield return new ValidationResult(
                "Дата реєстрації не може бути в майбутньому.",
                new[] { nameof(RegistrationDate) });
        }
    }
}

// ==== Model\Scooter.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class Scooter : Entity
{
    [Required(ErrorMessage = "Поле \"Модель\" обов'язкове для заповнення")]
    [Display(Name = "Модель")]
    [StringLength(100, ErrorMessage = "Модель не може бути довшою за 100 символів")]
    public string Model { get; set; } = null!;

    [Required(ErrorMessage = "Поле \"Рівень батареї\" обов'язкове для заповнення")]
    [Display(Name = "Рівень батареї")]
    [Range(0, 100, ErrorMessage = "Рівень батареї повинен бути від 0 до 100")]
    public int BatteryLevel { get; set; }

    [Required(ErrorMessage = "Поле \"Статус\" обов'язкове для заповнення")]
    [Display(Name = "Статус")]
    public int StatusId { get; set; }

    [Display(Name = "Поточне розташування")]
    [StringLength(255, ErrorMessage = "Розташування не може бути довшим за 255 символів")]
    public string? CurrentLocation { get; set; }

    [Display(Name = "Станція")]
    public int? StationId { get; set; }

    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();
    public virtual ChargingStation? Station { get; set; }
    public virtual ScooterStatus Status { get; set; } = null!;
}

// ==== Model\ScooterStatus.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ScooterDomain.Model;

public partial class ScooterStatus : Entity
{
    [Required(ErrorMessage = "Поле \"Назва\" обов'язкове для заповнення")]
    [Display(Name = "Назва")]
    [StringLength(100, ErrorMessage = "Назва не може бути довшою за 100 символів")]
    public string Name { get; set; } = null!;

    public virtual ICollection<Scooter> Scooters { get; set; } = new List<Scooter>();
}

# ScooterInfrastructure Project
==================================================
// ==== appsettings.json ====
{
  "ConnectionStrings": {
    "DefaultConnection": "Server= DESKTOP-4H0AUGU\\SQLEXPRESS; Database=Scooters; Trusted_Connection=True; MultipleActiveResultSets=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}


// ==== Program.cs ====
using ScooterInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Localization;
using System.Globalization;
using Microsoft.AspNetCore.Identity;
using ScooterDomain.Model;

var builder = WebApplication.CreateBuilder(args);

// ������������ ����������
builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    var supportedCultures = new[]
    {
        new CultureInfo("uk-UA"),
        new CultureInfo("en-US")
    };
    options.DefaultRequestCulture = new RequestCulture("uk-UA");
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
});

// ������������ Identity
builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    options.Password.RequiredLength = 8;
    options.Password.RequireDigit = true;
    options.Password.RequireLowercase = true;
    options.Password.RequireUppercase = true;
    options.Password.RequireNonAlphanumeric = false;
})
.AddEntityFrameworkStores<ScootersContext>()
.AddDefaultTokenProviders();

// ������������ �������������� ����� cookies
builder.Services.AddAuthentication()
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
    });

// ��������� ���������� �� ��������� ���� �����
builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<ScootersContext>(option => option.UseSqlServer(
    builder.Configuration.GetConnectionString("DefaultConnection")
));

var app = builder.Build();

// ������������ �����
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    // ������ ����� ��� ���������
    string[] roleNames = { "User", "Admin" }; // ������ ����� ���, �� ��� ������ �����������

    foreach (var roleName in roleNames)
    {
        var roleExists = await roleManager.RoleExistsAsync(roleName);
        if (!roleExists)
        {
            await roleManager.CreateAsync(new IdentityRole(roleName));
        }
    }

    
}

// ������������ middleware
app.UseRequestLocalization();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapStaticAssets();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}")
    .WithStaticAssets();

app.Run();

// ==== Controllers\AccountController.cs ====
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using ScooterDomain.Model;
using ScooterInfrastructure.Models;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ScootersContext _context;

        public AccountController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            ScootersContext context)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _context = context;
        }

        [HttpGet]
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                // Перевірка унікальності номера телефону
                var existingRider = await _context.Riders
                    .FirstOrDefaultAsync(r => r.PhoneNumber == model.PhoneNumber);
                if (existingRider != null)
                {
                    ModelState.AddModelError("PhoneNumber", "Цей номер телефону вже використовується.");
                    return View(model);
                }

                // Створюємо нового користувача ApplicationUser
                var user = new ApplicationUser
                {
                    UserName = model.Email,
                    Email = model.Email,
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    PhoneNumber = model.PhoneNumber
                };

                var result = await _userManager.CreateAsync(user, model.Password);
                if (result.Succeeded)
                {
                    // Створюємо запис у таблиці Rider
                    var rider = new Rider
                    {
                        FirstName = model.FirstName,
                        LastName = model.LastName,
                        PhoneNumber = model.PhoneNumber,
                        RegistrationDate = DateOnly.FromDateTime(DateTime.Now),
                        AccountBalance = 0,
                        ApplicationUserId = user.Id // Зв'язок з ApplicationUser
                    };

                    _context.Riders.Add(rider);
                    await _context.SaveChangesAsync();

                    // Оновлюємо RiderId у ApplicationUser
                    user.RiderId = rider.Id;
                    await _userManager.UpdateAsync(user);

                    // Додаємо RiderId до Claims
                    await _userManager.AddClaimAsync(user, new Claim("RiderId", user.RiderId.ToString()));

                    // Додаємо користувача до ролі "User"
                    await _userManager.AddToRoleAsync(user, "User");

                    // Виконуємо вхід користувача
                    await _signInManager.SignInAsync(user, isPersistent: false);
                    return RedirectToAction("Index", "Home");
                }

                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            return View(model);
        }

        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    var user = await _userManager.FindByEmailAsync(model.Email);
                    if (await _userManager.IsInRoleAsync(user, "Admin"))
                    {
                        return RedirectToAction("Index", "Scooters");
                    }
                    return RedirectToAction("Index", "Scooters");
                }
                ModelState.AddModelError(string.Empty, "Невірний email або пароль.");
            }

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }
    }
}

// ==== Controllers\ChargingStationsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public class ChargingStationsController : Controller
    {
        private readonly ScootersContext _context;

        public ChargingStationsController(ScootersContext context)
        {
            _context = context;
        }

        // GET: ChargingStations
        public async Task<IActionResult> Index()
        {
            return View(await _context.ChargingStations.ToListAsync());
        }

        // GET: ChargingStations/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var chargingStation = await _context.ChargingStations
                .FirstOrDefaultAsync(m => m.Id == id);
            if (chargingStation == null)
            {
                return NotFound();
            }

            return View(chargingStation);
        }

        // GET: ChargingStations/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: ChargingStations/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,Location,ChargingSlots,CurrentScooterCount,Id")] ChargingStation chargingStation)
        {
            if (ModelState.IsValid)
            {
                _context.Add(chargingStation);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(chargingStation);
        }

        // GET: ChargingStations/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var chargingStation = await _context.ChargingStations.FindAsync(id);
            if (chargingStation == null)
            {
                return NotFound();
            }
            return View(chargingStation);
        }

        // POST: ChargingStations/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Name,Location,ChargingSlots,CurrentScooterCount,Id")] ChargingStation chargingStation)
        {
            if (id != chargingStation.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(chargingStation);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ChargingStationExists(chargingStation.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(chargingStation);
        }

        // GET: ChargingStations/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var chargingStation = await _context.ChargingStations
                .FirstOrDefaultAsync(m => m.Id == id);
            if (chargingStation == null)
            {
                return NotFound();
            }

            return View(chargingStation);
        }

        // POST: ChargingStations/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var chargingStation = await _context.ChargingStations.FindAsync(id);
            if (chargingStation != null)
            {
                _context.ChargingStations.Remove(chargingStation);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ChargingStationExists(int id)
        {
            return _context.ChargingStations.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\ChartsController.cs ====
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public class ChartsController : ControllerBase
    {
        private readonly ScootersContext _context;

        public ChartsController(ScootersContext context)
        {
            _context = context;
        }

        // Діаграма 1: Кількість самокатів за статусами
        [HttpGet("scootersByStatus")]
        public async Task<IActionResult> GetScootersByStatusAsync()
        {
            var data = await _context.Scooters
                .Include(s => s.Status)
                .GroupBy(s => s.Status.Name)
                .Select(g => new
                {
                    Status = g.Key,
                    Count = g.Count()
                })
                .ToListAsync();

            return Ok(data);
        }

        // Діаграма 2: Кількість самокатів на станціях зарядки
        [HttpGet("scootersByStation")]
        public async Task<IActionResult> GetScootersByStationAsync()
        {
            var data = await _context.ChargingStations
                .Select(cs => new
                {
                    StationName = cs.Name,
                    Count = cs.CurrentScooterCount
                })
                .ToListAsync();

            return Ok(data);
        }
    }
}

// ==== Controllers\DiscountsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class DiscountsController : Controller
    {
        private readonly ScootersContext _context;

        public DiscountsController(ScootersContext context)
        {
            _context = context;
        }

        // GET: Discounts
        [Authorize(Roles = "User,Admin")] // Доступ для User і Admin
        public async Task<IActionResult> Index()
        {
            return View(await _context.Discounts.ToListAsync());
        }

        // GET: Discounts/Details/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var discount = await _context.Discounts
                .FirstOrDefaultAsync(m => m.Id == id);
            if (discount == null)
            {
                return NotFound();
            }

            return View(discount);
        }

        // GET: Discounts/Create
        [Authorize(Roles = "Admin")] // Лише для Admin
        public IActionResult Create()
        {
            return View();
        }

        // POST: Discounts/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Create([Bind("Name,Percentage,Description,Id")] Discount discount)
        {
            if (ModelState.IsValid)
            {
                _context.Add(discount);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(discount);
        }

        // GET: Discounts/Edit/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var discount = await _context.Discounts.FindAsync(id);
            if (discount == null)
            {
                return NotFound();
            }
            return View(discount);
        }

        // POST: Discounts/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int id, [Bind("Name,Percentage,Description,Id")] Discount discount)
        {
            if (id != discount.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(discount);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!DiscountExists(discount.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(discount);
        }

        // GET: Discounts/Delete/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var discount = await _context.Discounts
                .FirstOrDefaultAsync(m => m.Id == id);
            if (discount == null)
            {
                return NotFound();
            }

            return View(discount);
        }

        // POST: Discounts/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var discount = await _context.Discounts.FindAsync(id);
            if (discount != null)
            {
                _context.Discounts.Remove(discount);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool DiscountExists(int id)
        {
            return _context.Discounts.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\DocxExport.cs ====
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ScooterDomain.Model;
using ScooterInfrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        #region ExportDocx

        /// <summary>
        /// Експортує дані в структурований .docx-файл у вигляді таблиці.
        /// </summary>
        /// <param name="tableName">Назва таблиці</param>
        /// <returns>Файл Word</returns>
        [HttpGet]
        public async Task<IActionResult> ExportDocx(string tableName)
        {
            var fileName = $"{tableName}_Report_{DateTime.Now:yyyyMMdd}.docx";
            var stream = new MemoryStream();

            using (var doc = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document, true))
            {
                var mainPart = doc.AddMainDocumentPart();
                mainPart.Document = new Document();
                var body = mainPart.Document.AppendChild(new Body());

                AddDocxTitle(body, $"Report for {tableName}");

                switch (tableName)
                {
                    case "ChargingStations":
                        await ExportChargingStationsToDocx(body);
                        break;
                    case "Scooters":
                        await ExportScootersToDocx(body);
                        break;
                    case "Riders":
                        await ExportRidersToDocx(body);
                        break;
                    case "Discounts":
                        await ExportDiscountsToDocx(body);
                        break;
                    case "Rentals":
                        await ExportRentalsToDocx(body);
                        break;
                    default:
                        return BadRequest("Invalid table name provided.");
                }

                doc.Save();
            }

            stream.Position = 0;
            return File(stream, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", fileName);
        }

        private async Task ExportChargingStationsToDocx(Body body)
        {
            var stations = await _context.ChargingStations.AsNoTracking().ToListAsync();
            var table = CreateDocxTable(new[] { "Назва", "Розташування", "Кількість слотів", "Поточна кількість скутерів" });
            foreach (var station in stations)
            {
                table.Append(CreateDocxRow(new[] { station.Name, station.Location, station.ChargingSlots.ToString(), station.CurrentScooterCount.ToString() }));
            }
            body.Append(table);
        }

        private async Task ExportScootersToDocx(Body body)
        {
            var scooters = await _context.Scooters.Include(s => s.Status).AsNoTracking().ToListAsync();
            var table = CreateDocxTable(new[] { "Модель", "Рівень батареї", "Статус", "Поточне розташування", "Станція ID" });
            foreach (var scooter in scooters)
            {
                table.Append(CreateDocxRow(new[] { scooter.Model, scooter.BatteryLevel.ToString(), scooter.Status.Name, scooter.CurrentLocation, scooter.StationId?.ToString() }));
            }
            body.Append(table);
        }

        private async Task ExportRidersToDocx(Body body)
        {
            var riders = await _context.Riders.AsNoTracking().ToListAsync();
            var table = CreateDocxTable(new[] { "Ім'я", "Прізвище", "Номер телефону", "Дата реєстрації", "Баланс рахунку" });
            foreach (var rider in riders)
            {
                table.Append(CreateDocxRow(new[] { rider.FirstName, rider.LastName, rider.PhoneNumber, rider.RegistrationDate.ToString("yyyy-MM-dd"), rider.AccountBalance?.ToString() }));
            }
            body.Append(table);
        }

        private async Task ExportDiscountsToDocx(Body body)
        {
            var discounts = await _context.Discounts.AsNoTracking().ToListAsync();
            var table = CreateDocxTable(new[] { "Назва", "Відсоток знижки", "Опис" });
            foreach (var discount in discounts)
            {
                table.Append(CreateDocxRow(new[] { discount.Name, discount.Percentage.ToString(), discount.Description }));
            }
            body.Append(table);
        }

        private async Task ExportRentalsToDocx(Body body)
        {
            var rentals = await _context.Rentals.Include(r => r.Status).AsNoTracking().ToListAsync();
            var table = CreateDocxTable(new[] { "Rider ID", "Scooter ID", "Статус", "Час початку", "Час завершення", "Загальна вартість", "Дата оплати", "Сума оплати", "Payment Method ID" });
            foreach (var rental in rentals)
            {
                table.Append(CreateDocxRow(new[] { rental.RiderId.ToString(), rental.ScooterId.ToString(), rental.Status.Name, rental.StartTime.ToString("yyyy-MM-dd HH:mm"), rental.EndTime?.ToString("yyyy-MM-dd HH:mm"), rental.TotalCost.ToString(), rental.PaymentDate?.ToString("yyyy-MM-dd HH:mm"), rental.Amount?.ToString(), rental.PaymentMethodId?.ToString() }));
            }
            body.Append(table);
        }

        #endregion
    }
}

// ==== Controllers\DocxImport.cs ====
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ScooterDomain.Model;
using ScooterInfrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        #region ImportDocx

        /// <summary>
        /// Імпортує дані з .docx-файлу до відповідної таблиці.
        /// </summary>
        /// <param name="file">Завантажений .docx-файл</param>
        /// <param name="tableName">Назва таблиці для імпорту</param>
        /// <returns>Перенаправлення на Index або відображення помилок</returns>
        [HttpPost]
        public async Task<IActionResult> ImportDocx(IFormFile file, string tableName)
        {
            if (!IsFileValid(file))
            {
                ModelState.AddModelError("file", "Будь ласка, виберіть файл для імпорту.");
                return View("Index");
            }

            var savePath = await SaveUploadedFile(file);
            using var doc = WordprocessingDocument.Open(savePath, false);
            var body = doc.MainDocumentPart.Document.Body;

            var table = body.Elements<Table>().FirstOrDefault();
            if (table == null)
            {
                ModelState.AddModelError("file", "Файл не містить таблиці з даними.");
                return View("Index");
            }

            var dataRows = table.Elements<TableRow>().Skip(1).ToList();
            if (!dataRows.Any())
            {
                ModelState.AddModelError("file", "Таблиця не містить даних для імпорту.");
                return View("Index");
            }

            switch (tableName)
            {
                case "ChargingStations":
                    await ImportChargingStationsFromDocxTable(dataRows);
                    break;

                case "Scooters":
                    await ImportScootersFromDocxTable(dataRows);
                    break;

                case "Riders":
                    await ImportRidersFromDocxTable(dataRows);
                    break;

                case "Discounts":
                    await ImportDiscountsFromDocxTable(dataRows);
                    break;

                case "Rentals":
                    await ImportRentalsFromDocxTable(dataRows);
                    break;

                default:
                    ModelState.AddModelError("tableName", "Невірно вказана таблиця.");
                    return View("Index");
            }

            if (ModelState.IsValid)
            {
                await _context.SaveChangesAsync();
                return RedirectToAction("Index", new { controller = tableName });
            }

            return View("Index");
        }

        private async Task ImportChargingStationsFromDocxTable(List<TableRow> rows)
        {
            foreach (var row in rows)
            {
                var cells = row.Elements<TableCell>().ToList();
                if (cells.Count < 4) continue;

                var chargingStation = new ChargingStation
                {
                    Name = cells[0].InnerText.Trim(),
                    Location = cells[1].InnerText.Trim(),
                    ChargingSlots = int.TryParse(cells[2].InnerText.Trim(), out int slots) ? slots : 0,
                    CurrentScooterCount = int.TryParse(cells[3].InnerText.Trim(), out int count) ? count : 0
                };
                ProcessEntity(chargingStation, row.InnerText);
            }
        }

        private async Task ImportScootersFromDocxTable(List<TableRow> rows)
        {
            foreach (var row in rows)
            {
                var cells = row.Elements<TableCell>().ToList();
                if (cells.Count < 5) continue;

                var scooter = new Scooter
                {
                    Model = cells[0].InnerText.Trim(),
                    BatteryLevel = int.TryParse(cells[1].InnerText.Trim(), out int level) ? level : 0,
                    StatusId = await GetScooterStatusIdFromName(cells[2].InnerText.Trim()),
                    CurrentLocation = cells[3].InnerText.Trim(),
                    StationId = int.TryParse(cells[4].InnerText.Trim(), out int stationId) ? stationId : null
                };
                ProcessEntity(scooter, row.InnerText);
            }
        }

        private async Task ImportRidersFromDocxTable(List<TableRow> rows)
        {
            foreach (var row in rows)
            {
                var cells = row.Elements<TableCell>().ToList();
                if (cells.Count < 5) continue;

                var rider = new Rider
                {
                    FirstName = cells[0].InnerText.Trim(),
                    LastName = cells[1].InnerText.Trim(),
                    PhoneNumber = cells[2].InnerText.Trim(),
                    RegistrationDate = DateOnly.TryParse(cells[3].InnerText.Trim(), out DateOnly regDate) ? regDate : DateOnly.FromDateTime(DateTime.Now),
                    AccountBalance = decimal.TryParse(cells[4].InnerText.Trim(), out decimal balance) ? balance : 0
                };
                ProcessEntity(rider, row.InnerText);
            }
        }

        private async Task ImportDiscountsFromDocxTable(List<TableRow> rows)
        {
            foreach (var row in rows)
            {
                var cells = row.Elements<TableCell>().ToList();
                if (cells.Count < 3) continue;

                var discount = new Discount
                {
                    Name = cells[0].InnerText.Trim(),
                    Percentage = decimal.TryParse(cells[1].InnerText.Trim(), out decimal percentage) ? percentage : 0,
                    Description = cells[2].InnerText.Trim()
                };
                ProcessEntity(discount, row.InnerText);
            }
        }

        private async Task ImportRentalsFromDocxTable(List<TableRow> rows)
        {
            foreach (var row in rows)
            {
                var cells = row.Elements<TableCell>().ToList();
                if (cells.Count < 9) continue;

                var rental = new Rental
                {
                    RiderId = int.TryParse(cells[0].InnerText.Trim(), out int riderId) ? riderId : 0,
                    ScooterId = int.TryParse(cells[1].InnerText.Trim(), out int scooterId) ? scooterId : 0,
                    StatusId = await GetRentalStatusIdFromName(cells[2].InnerText.Trim()),
                    StartTime = DateTime.TryParse(cells[3].InnerText.Trim(), out DateTime start) ? start : DateTime.Now,
                    EndTime = DateTime.TryParse(cells[4].InnerText.Trim(), out DateTime end) ? end : null,
                    TotalCost = decimal.TryParse(cells[5].InnerText.Trim(), out decimal cost) ? cost : 0,
                    PaymentDate = DateTime.TryParse(cells[6].InnerText.Trim(), out DateTime payDate) ? payDate : null,
                    Amount = decimal.TryParse(cells[7].InnerText.Trim(), out decimal amount) ? amount : null,
                    PaymentMethodId = int.TryParse(cells[8].InnerText.Trim(), out int payMethod) ? payMethod : null
                };
                ProcessEntity(rental, row.InnerText);
            }
        }

        #endregion
    }
}

// ==== Controllers\ExcelExport.cs ====
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ScooterDomain.Model;
using ScooterInfrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        #region ExportExcel

        /// <summary>
        /// Експортує дані з бази в Excel-файл із застосуванням фільтрів.
        /// </summary>
        /// <param name="tableName">Назва таблиці</param>
        /// <param name="statusId">Фільтр за статусом (опціонально)</param>
        /// <param name="startDate">Початкова дата (опціонально)</param>
        /// <param name="endDate">Кінцева дата (опціонально)</param>
        /// <returns>Файл Excel</returns>
        [HttpGet]
        public async Task<IActionResult> ExportExcel(string tableName, int? statusId = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add(tableName);

            switch (tableName)
            {
                case "ChargingStations":
                    await ExportChargingStationsToExcel(worksheet);
                    break;

                case "Scooters":
                    await ExportScootersToExcel(worksheet, statusId);
                    break;

                case "Riders":
                    await ExportRidersToExcel(worksheet, startDate, endDate);
                    break;

                case "Discounts":
                    await ExportDiscountsToExcel(worksheet);
                    break;

                case "Rentals":
                    await ExportRentalsToExcel(worksheet, statusId, startDate, endDate);
                    break;

                default:
                    return BadRequest("Невірно вказана таблиця.");
            }

            worksheet.Cells.AutoFitColumns();
            var stream = new MemoryStream(package.GetAsByteArray());
            var fileName = $"{tableName}_Report_{DateTime.Now:yyyyMMdd}.xlsx";
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileName);
        }

        private async Task ExportChargingStationsToExcel(ExcelWorksheet worksheet)
        {
            var stations = await _context.ChargingStations.AsNoTracking().ToListAsync();
            SetExcelHeaders(worksheet, new[] { "Назва", "Розташування", "Кількість слотів", "Поточна кількість скутерів" });
            for (int i = 0; i < stations.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = stations[i].Name;
                worksheet.Cells[i + 2, 2].Value = stations[i].Location;
                worksheet.Cells[i + 2, 3].Value = stations[i].ChargingSlots;
                worksheet.Cells[i + 2, 4].Value = stations[i].CurrentScooterCount;
            }
        }

        private async Task ExportScootersToExcel(ExcelWorksheet worksheet, int? statusId)
        {
            var query = _context.Scooters.Include(s => s.Status).AsNoTracking();
            if (statusId.HasValue)
                query = query.Where(s => s.StatusId == statusId.Value);
            var scooters = await query.ToListAsync();
            SetExcelHeaders(worksheet, new[] { "Модель", "Рівень батареї", "Статус", "Поточне розташування", "Станція ID" });
            for (int i = 0; i < scooters.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = scooters[i].Model;
                worksheet.Cells[i + 2, 2].Value = scooters[i].BatteryLevel;
                worksheet.Cells[i + 2, 3].Value = scooters[i].Status.Name;
                worksheet.Cells[i + 2, 4].Value = scooters[i].CurrentLocation;
                worksheet.Cells[i + 2, 5].Value = scooters[i].StationId;
            }
            AddStatusValidation(worksheet, scooters.Count, await _context.ScooterStatuses.Select(s => s.Name).ToListAsync(), "C");
        }

        private async Task ExportRidersToExcel(ExcelWorksheet worksheet, DateTime? startDate, DateTime? endDate)
        {
            var query = _context.Riders.AsNoTracking();
            if (startDate.HasValue)
                query = query.Where(r => r.RegistrationDate >= DateOnly.FromDateTime(startDate.Value));
            if (endDate.HasValue)
                query = query.Where(r => r.RegistrationDate <= DateOnly.FromDateTime(endDate.Value));
            var riders = await query.ToListAsync();
            SetExcelHeaders(worksheet, new[] { "Ім'я", "Прізвище", "Номер телефону", "Дата реєстрації", "Баланс рахунку" });
            for (int i = 0; i < riders.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = riders[i].FirstName;
                worksheet.Cells[i + 2, 2].Value = riders[i].LastName;
                worksheet.Cells[i + 2, 3].Value = riders[i].PhoneNumber;
                worksheet.Cells[i + 2, 4].Value = riders[i].RegistrationDate.ToString("yyyy-MM-dd");
                worksheet.Cells[i + 2, 5].Value = riders[i].AccountBalance;
            }
        }

        private async Task ExportDiscountsToExcel(ExcelWorksheet worksheet)
        {
            var discounts = await _context.Discounts.AsNoTracking().ToListAsync();
            SetExcelHeaders(worksheet, new[] { "Назва", "Відсоток знижки", "Опис" });
            for (int i = 0; i < discounts.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = discounts[i].Name;
                worksheet.Cells[i + 2, 2].Value = discounts[i].Percentage;
                worksheet.Cells[i + 2, 3].Value = discounts[i].Description;
            }
        }

        private async Task ExportRentalsToExcel(ExcelWorksheet worksheet, int? statusId, DateTime? startDate, DateTime? endDate)
        {
            var query = _context.Rentals.Include(r => r.Status).AsNoTracking();
            if (statusId.HasValue)
                query = query.Where(r => r.StatusId == statusId.Value);
            if (startDate.HasValue)
                query = query.Where(r => r.StartTime >= startDate.Value);
            if (endDate.HasValue)
                query = query.Where(r => r.StartTime <= endDate.Value);
            var rentals = await query.ToListAsync();
            SetExcelHeaders(worksheet, new[] { "Rider ID", "Scooter ID", "Статус", "Час початку", "Час завершення", "Загальна вартість", "Дата оплати", "Сума оплати", "Payment Method ID" });
            for (int i = 0; i < rentals.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = rentals[i].RiderId;
                worksheet.Cells[i + 2, 2].Value = rentals[i].ScooterId;
                worksheet.Cells[i + 2, 3].Value = rentals[i].Status.Name;
                worksheet.Cells[i + 2, 4].Value = rentals[i].StartTime.ToString("yyyy-MM-dd HH:mm");
                worksheet.Cells[i + 2, 5].Value = rentals[i].EndTime?.ToString("yyyy-MM-dd HH:mm");
                worksheet.Cells[i + 2, 6].Value = rentals[i].TotalCost;
                worksheet.Cells[i + 2, 7].Value = rentals[i].PaymentDate?.ToString("yyyy-MM-dd HH:mm");
                worksheet.Cells[i + 2, 8].Value = rentals[i].Amount;
                worksheet.Cells[i + 2, 9].Value = rentals[i].PaymentMethodId;
            }
            AddStatusValidation(worksheet, rentals.Count, await _context.RentalStatuses.Select(s => s.Name).ToListAsync(), "C");
        }

        #endregion
    }
}

// ==== Controllers\ExcelImport.cs ====
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ScooterDomain.Model;
using ScooterInfrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        #region ImportExcel

        /// <summary>
        /// Імпортує дані з Excel-файлу до відповідної таблиці в базі даних.
        /// </summary>
        /// <param name="file">Завантажений Excel-файл</param>
        /// <param name="tableName">Назва таблиці для імпорту</param>
        /// <returns>Перенаправлення на Index або відображення помилок</returns>
        [HttpPost]
        public async Task<IActionResult> ImportExcel(IFormFile file, string tableName)
        {
            if (!IsFileValid(file))
            {
                ModelState.AddModelError("file", "Будь ласка, виберіть файл для імпорту.");
                return View("Index");
            }

            using var package = new ExcelPackage(file.OpenReadStream());
            var worksheet = package.Workbook.Worksheets.FirstOrDefault();
            if (!IsWorksheetValid(worksheet))
            {
                ModelState.AddModelError("file", "Файл порожній або пошкоджений.");
                return View("Index");
            }

            var rowCount = worksheet.Dimension.Rows;
            switch (tableName)
            {
                case "ChargingStations":
                    if (!ValidateExcelStructure(worksheet, new[] { "Назва", "Розташування", "Кількість слотів", "Поточна кількість скутерів" }))
                    {
                        ModelState.AddModelError("file", "Невірна структура файлу для ChargingStations.");
                        return View("Index");
                    }
                    await ImportChargingStationsFromExcel(worksheet, rowCount);
                    break;

                case "Scooters":
                    if (!ValidateExcelStructure(worksheet, new[] { "Модель", "Рівень батареї", "Статус", "Поточне розташування", "Станція ID" }))
                    {
                        ModelState.AddModelError("file", "Невірна структура файлу для Scooters.");
                        return View("Index");
                    }
                    await ImportScootersFromExcel(worksheet, rowCount);
                    break;

                case "Riders":
                    if (!ValidateExcelStructure(worksheet, new[] { "Ім'я", "Прізвище", "Номер телефону", "Дата реєстрації", "Баланс рахунку" }))
                    {
                        ModelState.AddModelError("file", "Невірна структура файлу для Riders.");
                        return View("Index");
                    }
                    await ImportRidersFromExcel(worksheet, rowCount);
                    break;

                case "Discounts":
                    if (!ValidateExcelStructure(worksheet, new[] { "Назва", "Відсоток знижки", "Опис" }))
                    {
                        ModelState.AddModelError("file", "Невірна структура файлу для Discounts.");
                        return View("Index");
                    }
                    await ImportDiscountsFromExcel(worksheet, rowCount);
                    break;

                case "Rentals":
                    if (!ValidateExcelStructure(worksheet, new[] { "Rider ID", "Scooter ID", "Статус", "Час початку", "Час завершення", "Загальна вартість", "Дата оплати", "Сума оплати", "Payment Method ID" }))
                    {
                        ModelState.AddModelError("file", "Невірна структура файлу для Rentals.");
                        return View("Index");
                    }
                    await ImportRentalsFromExcel(worksheet, rowCount);
                    break;

                default:
                    ModelState.AddModelError("tableName", "Невірно вказана таблиця.");
                    return View("Index");
            }

            if (ModelState.IsValid)
            {
                await _context.SaveChangesAsync();
                return RedirectToAction("Index", new { controller = tableName });
            }

            return View("Index");
        }

        private async Task ImportChargingStationsFromExcel(ExcelWorksheet worksheet, int rowCount)
        {
            for (int row = 2; row <= rowCount; row++)
            {
                var chargingStation = new ChargingStation
                {
                    Name = worksheet.Cells[row, 1].Value?.ToString(),
                    Location = worksheet.Cells[row, 2].Value?.ToString(),
                    ChargingSlots = int.TryParse(worksheet.Cells[row, 3].Value?.ToString(), out int slots) ? slots : 0,
                    CurrentScooterCount = int.TryParse(worksheet.Cells[row, 4].Value?.ToString(), out int count) ? count : 0
                };
                ProcessEntity(chargingStation, row);
            }
        }

        private async Task ImportScootersFromExcel(ExcelWorksheet worksheet, int rowCount)
        {
            for (int row = 2; row <= rowCount; row++)
            {
                var scooter = new Scooter
                {
                    Model = worksheet.Cells[row, 1].Value?.ToString(),
                    BatteryLevel = int.TryParse(worksheet.Cells[row, 2].Value?.ToString(), out int level) ? level : 0,
                    StatusId = await GetScooterStatusIdFromName(worksheet.Cells[row, 3].Value?.ToString()),
                    CurrentLocation = worksheet.Cells[row, 4].Value?.ToString(),
                    StationId = int.TryParse(worksheet.Cells[row, 5].Value?.ToString(), out int stationId) ? stationId : null
                };
                ProcessEntity(scooter, row);
            }
        }

        private async Task ImportRidersFromExcel(ExcelWorksheet worksheet, int rowCount)
        {
            for (int row = 2; row <= rowCount; row++)
            {
                var rider = new Rider
                {
                    FirstName = worksheet.Cells[row, 1].Value?.ToString(),
                    LastName = worksheet.Cells[row, 2].Value?.ToString(),
                    PhoneNumber = worksheet.Cells[row, 3].Value?.ToString(),
                    RegistrationDate = DateOnly.TryParse(worksheet.Cells[row, 4].Value?.ToString(), out DateOnly regDate) ? regDate : DateOnly.FromDateTime(DateTime.Now),
                    AccountBalance = decimal.TryParse(worksheet.Cells[row, 5].Value?.ToString(), out decimal balance) ? balance : 0
                };
                ProcessEntity(rider, row);
            }
        }

        private async Task ImportDiscountsFromExcel(ExcelWorksheet worksheet, int rowCount)
        {
            for (int row = 2; row <= rowCount; row++)
            {
                var discount = new Discount
                {
                    Name = worksheet.Cells[row, 1].Value?.ToString(),
                    Percentage = decimal.TryParse(worksheet.Cells[row, 2].Value?.ToString(), out decimal percentage) ? percentage : 0,
                    Description = worksheet.Cells[row, 3].Value?.ToString()
                };
                ProcessEntity(discount, row);
            }
        }

        private async Task ImportRentalsFromExcel(ExcelWorksheet worksheet, int rowCount)
        {
            for (int row = 2; row <= rowCount; row++)
            {
                var rental = new Rental
                {
                    RiderId = int.TryParse(worksheet.Cells[row, 1].Value?.ToString(), out int riderId) ? riderId : 0,
                    ScooterId = int.TryParse(worksheet.Cells[row, 2].Value?.ToString(), out int scooterId) ? scooterId : 0,
                    StatusId = await GetRentalStatusIdFromName(worksheet.Cells[row, 3].Value?.ToString()),
                    StartTime = DateTime.TryParse(worksheet.Cells[row, 4].Value?.ToString(), out DateTime start) ? start : DateTime.Now,
                    EndTime = DateTime.TryParse(worksheet.Cells[row, 5].Value?.ToString(), out DateTime end) ? end : null,
                    TotalCost = decimal.TryParse(worksheet.Cells[row, 6].Value?.ToString(), out decimal cost) ? cost : 0,
                    PaymentDate = DateTime.TryParse(worksheet.Cells[row, 7].Value?.ToString(), out DateTime payDate) ? payDate : null,
                    Amount = decimal.TryParse(worksheet.Cells[row, 8].Value?.ToString(), out decimal amount) ? amount : null,
                    PaymentMethodId = int.TryParse(worksheet.Cells[row, 9].Value?.ToString(), out int payMethod) ? payMethod : null
                };
                ProcessEntity(rental, row);
            }
        }

        #endregion
    }
}

// ==== Controllers\HomeController.cs ====
using Microsoft.AspNetCore.Mvc;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class HomeController : Controller
    {
        private readonly ScootersContext _context;

        public HomeController(ScootersContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            ViewBag.AvailableScooters = _context.Scooters.Count(s => s.Status.Name == "���������");
            ViewBag.ChargingStationsCount = _context.ChargingStations.Count();
            ViewBag.ActiveRentals = _context.Rentals.Count(r => r.StatusId == 1);

            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }
    }
}

// ==== Controllers\RentalsController.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Security.Claims; // Додано для доступу до ідентифікатора користувача
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class RentalsController : Controller
    {
        private readonly ScootersContext _context;

        public RentalsController(ScootersContext context)
        {
            _context = context;
        }

        // GET: Rentals
        [Authorize(Roles = "User,Admin")] // Доступ для User і Admin
        public async Task<IActionResult> Index(int? id, string firstName, string lastName)
        {
            var rentalsQuery = _context.Rentals.AsQueryable();

            if (!User.IsInRole("Admin"))
            {
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                var rider = await _context.Riders.FirstOrDefaultAsync(r => r.ApplicationUserId == userId);
                if (rider == null)
                {
                    return Forbid(); // Користувач не пов'язаний із Rider
                }
                rentalsQuery = rentalsQuery.Where(r => r.RiderId == rider.Id);
                id = rider.Id; // Використовуємо ідентифікатор rider для передачі у View
                firstName = rider.FirstName;
                lastName = rider.LastName;
            }
            else if (id == null)
            {
                return NotFound();
            }
            else
            {
                rentalsQuery = rentalsQuery.Where(r => r.RiderId == id);
            }

            var scootersContext = rentalsQuery
                .Include(r => r.PaymentMethod)
                .Include(r => r.Rider)
                .Include(r => r.Scooter)
                .Include(r => r.Status);

            ViewBag.RiderId = id; // Додаємо для передачі в Create
            ViewBag.FirstName = firstName;
            ViewBag.LastName = lastName;

            return View(await scootersContext.ToListAsync());
        }
        // GET: Rentals/Details/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rental = await _context.Rentals
                .Include(r => r.PaymentMethod)
                .Include(r => r.Rider)
                .Include(r => r.Scooter)
                .Include(r => r.Status)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (rental == null)
            {
                return NotFound();
            }

            return View(rental);
        }

        // GET: Rentals/Create
        [Authorize(Roles = "User,Admin")] // Доступ для User і Admin
        public IActionResult Create()
        {
            ViewData["PaymentMethodId"] = new SelectList(_context.PaymentMethods, "Id", "Name");
            ViewData["RiderId"] = new SelectList(_context.Riders, "Id", "FirstName");
            ViewData["ScooterId"] = new SelectList(_context.Scooters, "Id", "Model");
            ViewData["StatusId"] = new SelectList(_context.RentalStatuses, "Id", "Name");
            return View();
        }

        // POST: Rentals/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "User,Admin")] // Доступ для User і Admin
        public async Task<IActionResult> Create([Bind("RiderId,ScooterId,StatusId,StartTime,EndTime,TotalCost,PaymentDate,Amount,PaymentMethodId,Id")] Rental rental)
        {
            if (rental == null)
            {
                return BadRequest("Модель оренди не може бути null.");
            }

            if (!User.IsInRole("Admin"))
            {
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                var rider = await _context.Riders.FirstOrDefaultAsync(r => r.ApplicationUserId == userId);
                if (rider != null)
                {
                    rental.RiderId = rider.Id; // Автоматично встановлюємо RiderId для User
                }
                else
                {
                    return Forbid(); // Користувач не пов'язаний із Rider
                }
            }
            else if (rental.RiderId == 0)
            {
                ModelState.AddModelError("RiderId", "RiderId є обов'язковим для адміністратора.");
            }

            ModelState.Remove("PaymentMethod");
            ModelState.Remove("Rider");
            ModelState.Remove("Scooter");
            ModelState.Remove("Status");

            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(rental);
            if (!Validator.TryValidateObject(rental, validationContext, validationResults, true))
            {
                foreach (var error in validationResults)
                {
                    ModelState.AddModelError(error.MemberNames.First(), error.ErrorMessage);
                }
            }

            if (ModelState.IsValid)
            {
                _context.Add(rental);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index), new { id = rental.RiderId, firstName = ViewBag.FirstName, lastName = ViewBag.LastName });
            }

            ViewData["PaymentMethodId"] = new SelectList(_context.PaymentMethods, "Id", "Name", rental.PaymentMethodId);
            ViewData["RiderId"] = new SelectList(_context.Riders, "Id", "FirstName", rental.RiderId);
            ViewData["ScooterId"] = new SelectList(_context.Scooters, "Id", "Model", rental.ScooterId);
            ViewData["StatusId"] = new SelectList(_context.RentalStatuses, "Id", "Name", rental.StatusId);
            return View(rental);
        }

        // GET: Rentals/Edit/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rental = await _context.Rentals.FindAsync(id);
            if (rental == null)
            {
                return NotFound();
            }
            ViewData["PaymentMethodId"] = new SelectList(_context.PaymentMethods, "Id", "Name", rental.PaymentMethodId);
            ViewData["RiderId"] = new SelectList(_context.Riders, "Id", "FirstName", rental.RiderId);
            ViewData["ScooterId"] = new SelectList(_context.Scooters, "Id", "Model", rental.ScooterId);
            ViewData["StatusId"] = new SelectList(_context.RentalStatuses, "Id", "Name", rental.StatusId);
            return View(rental);
        }

        // POST: Rentals/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int id, [Bind("RiderId,ScooterId,StatusId,StartTime,EndTime,TotalCost,PaymentDate,Amount,PaymentMethodId,Id")] Rental rental)
        {
            if (id != rental.Id)
            {
                return NotFound();
            }

            ModelState.Remove("PaymentMethod");
            ModelState.Remove("Rider");
            ModelState.Remove("Scooter");
            ModelState.Remove("Status");

            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(rental);
            if (!Validator.TryValidateObject(rental, validationContext, validationResults, true))
            {
                foreach (var error in validationResults)
                {
                    ModelState.AddModelError(error.MemberNames.First(), error.ErrorMessage);
                }
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(rental);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!RentalExists(rental.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index), new { id = rental.RiderId, firstName = ViewBag.FirstName, lastName = ViewBag.LastName });
            }

            ViewData["PaymentMethodId"] = new SelectList(_context.PaymentMethods, "Id", "Name", rental.PaymentMethodId);
            ViewData["RiderId"] = new SelectList(_context.Riders, "Id", "FirstName", rental.RiderId);
            ViewData["ScooterId"] = new SelectList(_context.Scooters, "Id", "Model", rental.ScooterId);
            ViewData["StatusId"] = new SelectList(_context.RentalStatuses, "Id", "Name", rental.StatusId);
            return View(rental);
        }

        // GET: Rentals/Delete/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rental = await _context.Rentals
                .Include(r => r.PaymentMethod)
                .Include(r => r.Rider)
                .Include(r => r.Scooter)
                .Include(r => r.Status)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (rental == null)
            {
                return NotFound();
            }

            return View(rental);
        }

        // POST: Rentals/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var rental = await _context.Rentals.FindAsync(id);
            if (rental != null)
            {
                _context.Rentals.Remove(rental);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool RentalExists(int id)
        {
            return _context.Rentals.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\ReportsController.cs ====
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        private readonly ScootersContext _context;
        protected const string ReportsDirectory = @"C:\Users\mbezv\Desktop\ISTPLAB\DOCX";

        public ReportsController(ScootersContext context)
        {
            _context = context;
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Налаштування ліцензії для EPPlus
        }

        // GET: Reports
        public IActionResult Index()
        {
            return View();
        }
    }
}

// ==== Controllers\ReportsHelper.cs ====
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ScooterDomain.Model;
using ScooterInfrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using NuGet.Packaging;

namespace ScooterInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")] // Обмеження доступу до всього контролера для Admin
    public partial class ReportsController : Controller
    {
        #region Helper Methods

        private bool IsFileValid(IFormFile file) => file != null && file.Length > 0;

        private bool IsWorksheetValid(ExcelWorksheet worksheet) => worksheet != null && worksheet.Dimension != null;

        private bool ValidateExcelStructure(ExcelWorksheet worksheet, string[] expectedHeaders)
        {
            if (worksheet.Dimension.Columns < expectedHeaders.Length)
                return false;
            for (int i = 0; i < expectedHeaders.Length; i++)
            {
                if (worksheet.Cells[1, i + 1].Value?.ToString() != expectedHeaders[i])
                    return false;
            }
            return true;
        }

        private void ProcessEntity<T>(T entity, int row) where T : Entity
        {
            if (ValidateModel(entity, out var validationResults))
            {
                _context.Add(entity);
            }
            else
            {
                foreach (var error in validationResults)
                {
                    ModelState.AddModelError("", $"Рядок {row}: {error.ErrorMessage}");
                }
            }
        }

        private void ProcessEntity<T>(T entity, string line) where T : Entity
        {
            if (ValidateModel(entity, out var validationResults))
            {
                _context.Add(entity);
            }
            else
            {
                foreach (var error in validationResults)
                {
                    ModelState.AddModelError("", $"Рядок '{line}': {error.ErrorMessage}");
                }
            }
        }

        private bool ValidateModel<T>(T model, out List<ValidationResult> validationResults)
        {
            validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model);
            return Validator.TryValidateObject(model, context, validationResults, true);
        }

        private async Task<string> SaveUploadedFile(IFormFile file)
        {
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.FileName)}";
            var savePath = Path.Combine(ReportsDirectory, fileName);
            Directory.CreateDirectory(ReportsDirectory);
            using (var stream = new FileStream(savePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }
            return savePath;
        }

        private void SetExcelHeaders(ExcelWorksheet worksheet, string[] headers)
        {
            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cells[1, i + 1].Value = headers[i];
            }
        }

        private void AddStatusValidation(ExcelWorksheet worksheet, int count, List<string> statuses, string column)
        {
            var validation = worksheet.DataValidations.AddListValidation($"{column}2:{column}{count + 1}");
            validation.Formula.Values.AddRange(statuses);
        }

        private void AddDocxTitle(Body body, string titleText)
        {
            var title = body.AppendChild(new Paragraph());
            var run = title.AppendChild(new Run());
            run.AppendChild(new Text(titleText));
        }

        private Table CreateDocxTable(string[] headers)
        {
            var table = new Table();
            var headerRow = new TableRow();
            foreach (var header in headers)
            {
                headerRow.Append(new TableCell(new Paragraph(new Run(new Text(header)))));
            }
            table.Append(headerRow);
            return table;
        }

        private TableRow CreateDocxRow(string[] values)
        {
            var row = new TableRow();
            foreach (var value in values)
            {
                row.Append(new TableCell(new Paragraph(new Run(new Text(value ?? "")))));
            }
            return row;
        }

        private async Task<int> GetScooterStatusIdFromName(string statusName)
        {
            if (string.IsNullOrEmpty(statusName)) return 1; // "Доступний" за замовчуванням
            var status = await _context.ScooterStatuses.FirstOrDefaultAsync(s => s.Name == statusName);
            return status?.Id ?? 1;
        }

        private async Task<int> GetRentalStatusIdFromName(string statusName)
        {
            if (string.IsNullOrEmpty(statusName)) return 1; // "Активна" за замовчуванням
            var status = await _context.RentalStatuses.FirstOrDefaultAsync(s => s.Name == statusName);
            return status?.Id ?? 1;
        }

        #endregion
    }
}

// ==== Controllers\RidersController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class RidersController : Controller
    {
        private readonly ScootersContext _context;

        public RidersController(ScootersContext context)
        {
            _context = context;
        }

        // GET: Riders
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Index()
        {
            return View(await _context.Riders.ToListAsync());
        }

        // GET: Riders/Details/5
        [Authorize(Roles = "User,Admin")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rider = await _context.Riders
                .Include(r => r.Discounts) // Завантажуємо пов’язані знижки
                .FirstOrDefaultAsync(m => m.Id == id);
            if (rider == null)
            {
                return NotFound();
            }

            if (!User.IsInRole("Admin"))
            {
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (rider.ApplicationUserId != userId)
                {
                    return Forbid(); // Доступ лише до власного профілю
                }
            }

            // Перенаправлення на сторінку історії оренд
            return RedirectToAction("Index", "Rentals", new
            {
                id = rider.Id,
                firstName = rider.FirstName,
                lastName = rider.LastName
            });
        }

        // GET: Riders/Profile
        [Authorize(Roles = "User,Admin")]
        public async Task<IActionResult> Profile()
        {
            // Отримуємо RiderId із claims авторизованого користувача
            var riderIdClaim = User.FindFirstValue("RiderId");
            if (riderIdClaim == null || !int.TryParse(riderIdClaim, out int riderId))
            {
                return NotFound("RiderId не знайдено в claims користувача.");
            }

            var rider = await _context.Riders
                .Include(r => r.Discounts)
                .FirstOrDefaultAsync(r => r.Id == riderId);
            if (rider == null)
            {
                return NotFound("Користувача не знайдено.");
            }

            // Перенаправлення на дію Details для відображення профілю
            return RedirectToAction("Details", new { id = rider.Id });
        }

        // GET: Riders/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            return View();
        }

        // POST: Riders/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Create([Bind("FirstName,LastName,PhoneNumber,RegistrationDate,AccountBalance,Id")] Rider rider)
        {
            if (ModelState.IsValid)
            {
                // Перевірка унікальності номера телефону
                var existingRider = await _context.Riders
                    .FirstOrDefaultAsync(r => r.PhoneNumber == rider.PhoneNumber);
                if (existingRider != null)
                {
                    ModelState.AddModelError("PhoneNumber", "Цей номер телефону вже використовується.");
                    return View(rider);
                }

                _context.Add(rider);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(rider);
        }

        // GET: Riders/Edit/5
        [Authorize(Roles = "User,Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rider = await _context.Riders.FindAsync(id);
            if (rider == null)
            {
                return NotFound();
            }

            if (!User.IsInRole("Admin"))
            {
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (rider.ApplicationUserId != userId)
                {
                    return Forbid(); // Доступ лише до власного профілю
                }
            }

            return View(rider);
        }

        // POST: Riders/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "User,Admin")]
        public async Task<IActionResult> Edit(int id, [Bind("FirstName,LastName,PhoneNumber,RegistrationDate,AccountBalance,Id")] Rider rider)
        {
            if (id != rider.Id)
            {
                return NotFound();
            }

            if (!User.IsInRole("Admin"))
            {
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                var existingRider = await _context.Riders.FindAsync(id);
                if (existingRider == null || existingRider.ApplicationUserId != userId)
                {
                    return Forbid(); // Доступ лише до власного профілю
                }
            }

            if (ModelState.IsValid)
            {
                // Перевірка унікальності номера телефону
                var existingRider = await _context.Riders
                    .FirstOrDefaultAsync(r => r.PhoneNumber == rider.PhoneNumber && r.Id != rider.Id);
                if (existingRider != null)
                {
                    ModelState.AddModelError("PhoneNumber", "Цей номер телефону вже використовується.");
                    return View(rider);
                }

                try
                {
                    _context.Update(rider);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!RiderExists(rider.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(rider);
        }

        // GET: Riders/Delete/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rider = await _context.Riders
                .FirstOrDefaultAsync(m => m.Id == id);
            if (rider == null)
            {
                return NotFound();
            }

            return View(rider);
        }

        // POST: Riders/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var rider = await _context.Riders.FindAsync(id);
            if (rider != null)
            {
                _context.Riders.Remove(rider);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        // GET: Riders/Discounts/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Discounts(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rider = await _context.Riders
                .Include(r => r.Discounts)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (rider == null)
            {
                return NotFound();
            }

            return View(rider);
        }

        // GET: Riders/ManageDiscounts/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> ManageDiscounts(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var rider = await _context.Riders
                .Include(r => r.Discounts)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (rider == null)
            {
                return NotFound();
            }

            var allDiscounts = await _context.Discounts.ToListAsync();
            var availableDiscounts = allDiscounts.Where(d => !rider.Discounts.Any(rd => rd.Id == d.Id)).ToList();

            ViewBag.AvailableDiscounts = new SelectList(availableDiscounts, "Id", "Name");
            return View(rider);
        }

        // POST: Riders/ManageDiscounts/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> ManageDiscounts(int id, int discountId)
        {
            var rider = await _context.Riders
                .Include(r => r.Discounts)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (rider == null)
            {
                return NotFound();
            }

            var discount = await _context.Discounts.FindAsync(discountId);
            if (discount == null)
            {
                return NotFound();
            }

            if (!rider.Discounts.Any(d => d.Id == discountId))
            {
                rider.Discounts.Add(discount);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(ManageDiscounts), new { id });
        }

        // POST: Riders/RemoveDiscount/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> RemoveDiscount(int id, int discountId)
        {
            var rider = await _context.Riders
                .Include(r => r.Discounts)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (rider == null)
            {
                return NotFound();
            }

            var discount = rider.Discounts.FirstOrDefault(d => d.Id == discountId);
            if (discount == null)
            {
                return NotFound();
            }

            rider.Discounts.Remove(discount);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(ManageDiscounts), new { id });
        }

        private bool RiderExists(int id)
        {
            return _context.Riders.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\ScootersController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization; // Додано для авторизації
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ScooterDomain.Model;
using ScooterInfrastructure;

namespace ScooterInfrastructure.Controllers
{
    public class ScootersController : Controller
    {
        private readonly ScootersContext _context;

        public ScootersController(ScootersContext context)
        {
            _context = context;
        }

        // GET: Scooters
        [Authorize(Roles = "User,Admin")] // Доступ для User і Admin
        public async Task<IActionResult> Index()
        {
            var scootersQuery = _context.Scooters.AsQueryable();
            if (!User.IsInRole("Admin"))
            {
                scootersQuery = scootersQuery.Where(s => s.StatusId == 1);
            }
            var scootersContext = scootersQuery
                .Include(s => s.Station)
                .Include(s => s.Status);
            return View(await scootersContext.ToListAsync());
        }

        // GET: Scooters/Details/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var scooter = await _context.Scooters
                .Include(s => s.Station)
                .Include(s => s.Status)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (scooter == null)
            {
                return NotFound();
            }

            return View(scooter);
        }

        // GET: Scooters/Create
        [Authorize(Roles = "Admin")] // Лише для Admin
        public IActionResult Create()
        {
            ViewData["StationId"] = new SelectList(_context.ChargingStations, "Id", "Location");
            ViewData["StatusId"] = new SelectList(_context.ScooterStatuses, "Id", "Name");
            return View();
        }

        // POST: Scooters/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Create([Bind("Model,BatteryLevel,StatusId,CurrentLocation,StationId,Id")] Scooter scooter)
        {
            ModelState.Remove("Station");
            ModelState.Remove("Status");
            if (ModelState.IsValid)
            {
                var status = await _context.ScooterStatuses.FindAsync(scooter.StatusId);
                if (status == null)
                {
                    ModelState.AddModelError("StatusId", "Invalid StatusId. No corresponding ScooterStatus found.");
                }
                else
                {
                    scooter.Status = status;
                }

                if (scooter.StationId.HasValue)
                {
                    var station = await _context.ChargingStations.FindAsync(scooter.StationId);
                    if (station == null)
                    {
                        ModelState.AddModelError("StationId", "Invalid StationId. No corresponding ChargingStation found.");
                    }
                    else
                    {
                        scooter.Station = station;
                    }
                }

                if (ModelState.IsValid)
                {
                    _context.Add(scooter);
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
            }

            foreach (var state in ModelState)
            {
                foreach (var error in state.Value.Errors)
                {
                    Console.WriteLine($"Property: {state.Key}, Error: {error.ErrorMessage}");
                }
            }

            ViewData["StationId"] = new SelectList(_context.ChargingStations, "Id", "Location", scooter.StationId);
            ViewData["StatusId"] = new SelectList(_context.ScooterStatuses, "Id", "Name", scooter.StatusId);
            return View(scooter);
        }

        // GET: Scooters/Edit/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var scooter = await _context.Scooters.FindAsync(id);
            if (scooter == null)
            {
                return NotFound();
            }
            ViewData["StationId"] = new SelectList(_context.ChargingStations, "Id", "Location", scooter.StationId);
            ViewData["StatusId"] = new SelectList(_context.ScooterStatuses, "Id", "Name", scooter.StatusId);
            return View(scooter);
        }

        // POST: Scooters/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Edit(int id, [Bind("Model,BatteryLevel,StatusId,CurrentLocation,StationId,Id")] Scooter scooter)
        {
            if (id != scooter.Id)
            {
                return NotFound();
            }
            ModelState.Remove("Station");
            ModelState.Remove("Status");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(scooter);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ScooterExists(scooter.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["StationId"] = new SelectList(_context.ChargingStations, "Id", "Location", scooter.StationId);
            ViewData["StatusId"] = new SelectList(_context.ScooterStatuses, "Id", "Name", scooter.StatusId);
            return View(scooter);
        }

        // GET: Scooters/Delete/5
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var scooter = await _context.Scooters
                .Include(s => s.Station)
                .Include(s => s.Status)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (scooter == null)
            {
                return NotFound();
            }

            return View(scooter);
        }

        // POST: Scooters/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")] // Лише для Admin
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var scooter = await _context.Scooters.FindAsync(id);
            if (scooter != null)
            {
                _context.Scooters.Remove(scooter);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ScooterExists(int id)
        {
            return _context.Scooters.Any(e => e.Id == id);
        }
    }
}

// ==== Migrations\20250406211945_AddIdentityTables.cs ====
using Microsoft.EntityFrameworkCore.Migrations;

namespace ScooterInfrastructure.Migrations
{
    public partial class AddIdentityTables : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RiderId = table.Column<int>(type: "int", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}

// ==== Migrations\20250406211945_AddIdentityTables.Designer.cs ====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterInfrastructure;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    [DbContext(typeof(ScootersContext))]
    [Migration("20250406211945_AddIdentityTables")]
    partial class AddIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("RiderId", "DiscountId")
                        .HasName("PK__RiderDis__03319AB9DCE2EE60");

                    b.HasIndex("DiscountId");

                    b.ToTable("RiderDiscounts", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingSlots")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScooterCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Charging__3214EC0740E33A38");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("ScooterDomain.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07DFFA9BD7");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07BFE55B0F");

                    b.HasIndex(new[] { "Name" }, "UQ_PaymentMethods_Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("ScooterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Rentals__3214EC073B94991F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__RentalSt__3214EC07F11819E6");

                    b.HasIndex(new[] { "Name" }, "UQ_RentalStatuses_Name")
                        .IsUnique();

                    b.ToTable("RentalStatuses");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Rider__3214EC071A080A86");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Rider__85FB4E38D8C6C142")
                        .IsUnique();

                    b.ToTable("Rider", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Scooters__3214EC0705145E7D");

                    b.HasIndex("StationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ScooterS__3214EC073261A798");

                    b.HasIndex(new[] { "Name" }, "UQ_ScooterStatuses_Name")
                        .IsUnique();

                    b.ToTable("ScooterStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.HasOne("ScooterDomain.Model.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Disco__48CFD27E");

                    b.HasOne("ScooterDomain.Model.Rider", null)
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Rider__47DBAE45");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.HasOne("ScooterDomain.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Rentals__Payment__5441852A");

                    b.HasOne("ScooterDomain.Model.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__RiderId__5165187F");

                    b.HasOne("ScooterDomain.Model.Scooter", "Scooter")
                        .WithMany("Rentals")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__Scooter__52593CB8");

                    b.HasOne("ScooterDomain.Model.RentalStatus", "Status")
                        .WithMany("Rentals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__StatusI__534D60F1");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Rider");

                    b.Navigation("Scooter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ScooterDomain.Model.Rider", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.HasOne("ScooterDomain.Model.ChargingStation", "Station")
                        .WithMany("Scooters")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Scooters__Statio__3F466844");

                    b.HasOne("ScooterDomain.Model.ScooterStatus", "Status")
                        .WithMany("Scooters")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Scooters__Status__3E52440B");

                    b.Navigation("Station");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Navigation("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Navigation("Scooters");
                });
#pragma warning restore 612, 618
        }
    }
}


// ==== Migrations\20250406212510_AddApplicationUserIdToRider.cs ====
using Microsoft.EntityFrameworkCore.Migrations;

namespace ScooterInfrastructure.Migrations
{
    public partial class AddApplicationUserIdToRider : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "ApplicationUserId",
                table: "Rider",
                type: "nvarchar(450)",
                maxLength: 450,
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_Rider_ApplicationUserId",
                table: "Rider",
                column: "ApplicationUserId",
                unique: true,
                filter: "[ApplicationUserId] IS NOT NULL");

            migrationBuilder.AddForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider",
                column: "ApplicationUserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.SetNull);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider");

            migrationBuilder.DropIndex(
                name: "IX_Rider_ApplicationUserId",
                table: "Rider");

            migrationBuilder.DropColumn(
                name: "ApplicationUserId",
                table: "Rider");
        }
    }
}

// ==== Migrations\20250406212510_AddApplicationUserIdToRider.Designer.cs ====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterInfrastructure;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    [DbContext(typeof(ScootersContext))]
    [Migration("20250406212510_AddApplicationUserIdToRider")]
    partial class AddApplicationUserIdToRider
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("RiderId", "DiscountId")
                        .HasName("PK__RiderDis__03319AB9DCE2EE60");

                    b.HasIndex("DiscountId");

                    b.ToTable("RiderDiscounts", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingSlots")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScooterCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Charging__3214EC0740E33A38");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("ScooterDomain.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07DFFA9BD7");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07BFE55B0F");

                    b.HasIndex(new[] { "Name" }, "UQ_PaymentMethods_Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("ScooterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Rentals__3214EC073B94991F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__RentalSt__3214EC07F11819E6");

                    b.HasIndex(new[] { "Name" }, "UQ_RentalStatuses_Name")
                        .IsUnique();

                    b.ToTable("RentalStatuses");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Rider__3214EC071A080A86");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Rider__85FB4E38D8C6C142")
                        .IsUnique();

                    b.ToTable("Rider", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Scooters__3214EC0705145E7D");

                    b.HasIndex("StationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ScooterS__3214EC073261A798");

                    b.HasIndex(new[] { "Name" }, "UQ_ScooterStatuses_Name")
                        .IsUnique();

                    b.ToTable("ScooterStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.HasOne("ScooterDomain.Model.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Disco__48CFD27E");

                    b.HasOne("ScooterDomain.Model.Rider", null)
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Rider__47DBAE45");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.HasOne("ScooterDomain.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Rentals__Payment__5441852A");

                    b.HasOne("ScooterDomain.Model.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__RiderId__5165187F");

                    b.HasOne("ScooterDomain.Model.Scooter", "Scooter")
                        .WithMany("Rentals")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__Scooter__52593CB8");

                    b.HasOne("ScooterDomain.Model.RentalStatus", "Status")
                        .WithMany("Rentals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__StatusI__534D60F1");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Rider");

                    b.Navigation("Scooter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ScooterDomain.Model.Rider", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.HasOne("ScooterDomain.Model.ChargingStation", "Station")
                        .WithMany("Scooters")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Scooters__Statio__3F466844");

                    b.HasOne("ScooterDomain.Model.ScooterStatus", "Status")
                        .WithMany("Scooters")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Scooters__Status__3E52440B");

                    b.Navigation("Station");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Navigation("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Navigation("Scooters");
                });
#pragma warning restore 612, 618
        }
    }
}


// ==== Migrations\20250406224311_AddFirstNameAndLastNameToAspNetUsers.cs ====
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    /// <inheritdoc />
    public partial class AddFirstNameAndLastNameToAspNetUsers : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "FirstName",
                table: "AspNetUsers",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "LastName",
                table: "AspNetUsers",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "FirstName",
                table: "AspNetUsers");

            migrationBuilder.DropColumn(
                name: "LastName",
                table: "AspNetUsers");
        }
    }
}


// ==== Migrations\20250406224311_AddFirstNameAndLastNameToAspNetUsers.Designer.cs ====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterInfrastructure;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    [DbContext(typeof(ScootersContext))]
    [Migration("20250406224311_AddFirstNameAndLastNameToAspNetUsers")]
    partial class AddFirstNameAndLastNameToAspNetUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("RiderId", "DiscountId")
                        .HasName("PK__RiderDis__03319AB9DCE2EE60");

                    b.HasIndex("DiscountId");

                    b.ToTable("RiderDiscounts", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingSlots")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScooterCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Charging__3214EC0740E33A38");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("ScooterDomain.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07DFFA9BD7");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07BFE55B0F");

                    b.HasIndex(new[] { "Name" }, "UQ_PaymentMethods_Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("ScooterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Rentals__3214EC073B94991F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__RentalSt__3214EC07F11819E6");

                    b.HasIndex(new[] { "Name" }, "UQ_RentalStatuses_Name")
                        .IsUnique();

                    b.ToTable("RentalStatuses");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Rider__3214EC071A080A86");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Rider__85FB4E38D8C6C142")
                        .IsUnique();

                    b.ToTable("Rider", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Scooters__3214EC0705145E7D");

                    b.HasIndex("StationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ScooterS__3214EC073261A798");

                    b.HasIndex(new[] { "Name" }, "UQ_ScooterStatuses_Name")
                        .IsUnique();

                    b.ToTable("ScooterStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.HasOne("ScooterDomain.Model.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Disco__48CFD27E");

                    b.HasOne("ScooterDomain.Model.Rider", null)
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Rider__47DBAE45");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.HasOne("ScooterDomain.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Rentals__Payment__5441852A");

                    b.HasOne("ScooterDomain.Model.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__RiderId__5165187F");

                    b.HasOne("ScooterDomain.Model.Scooter", "Scooter")
                        .WithMany("Rentals")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__Scooter__52593CB8");

                    b.HasOne("ScooterDomain.Model.RentalStatus", "Status")
                        .WithMany("Rentals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__StatusI__534D60F1");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Rider");

                    b.Navigation("Scooter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ScooterDomain.Model.Rider", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.HasOne("ScooterDomain.Model.ChargingStation", "Station")
                        .WithMany("Scooters")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Scooters__Statio__3F466844");

                    b.HasOne("ScooterDomain.Model.ScooterStatus", "Status")
                        .WithMany("Scooters")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Scooters__Status__3E52440B");

                    b.Navigation("Station");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Navigation("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Navigation("Scooters");
                });
#pragma warning restore 612, 618
        }
    }
}


// ==== Migrations\20250406230815_UpdateRiderApplicationUserRelationship.cs ====
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    /// <inheritdoc />
    public partial class UpdateRiderApplicationUserRelationship : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider");

            migrationBuilder.AddForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider",
                column: "ApplicationUserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider");

            migrationBuilder.AddForeignKey(
                name: "FK_Rider_AspNetUsers_ApplicationUserId",
                table: "Rider",
                column: "ApplicationUserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.SetNull);
        }
    }
}


// ==== Migrations\20250406230815_UpdateRiderApplicationUserRelationship.Designer.cs ====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterInfrastructure;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    [DbContext(typeof(ScootersContext))]
    [Migration("20250406230815_UpdateRiderApplicationUserRelationship")]
    partial class UpdateRiderApplicationUserRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("RiderId", "DiscountId")
                        .HasName("PK__RiderDis__03319AB9DCE2EE60");

                    b.HasIndex("DiscountId");

                    b.ToTable("RiderDiscounts", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingSlots")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScooterCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Charging__3214EC0740E33A38");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("ScooterDomain.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07DFFA9BD7");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07BFE55B0F");

                    b.HasIndex(new[] { "Name" }, "UQ_PaymentMethods_Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("ScooterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Rentals__3214EC073B94991F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__RentalSt__3214EC07F11819E6");

                    b.HasIndex(new[] { "Name" }, "UQ_RentalStatuses_Name")
                        .IsUnique();

                    b.ToTable("RentalStatuses");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Rider__3214EC071A080A86");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Rider__85FB4E38D8C6C142")
                        .IsUnique();

                    b.ToTable("Rider", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Scooters__3214EC0705145E7D");

                    b.HasIndex("StationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ScooterS__3214EC073261A798");

                    b.HasIndex(new[] { "Name" }, "UQ_ScooterStatuses_Name")
                        .IsUnique();

                    b.ToTable("ScooterStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.HasOne("ScooterDomain.Model.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Disco__48CFD27E");

                    b.HasOne("ScooterDomain.Model.Rider", null)
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Rider__47DBAE45");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.HasOne("ScooterDomain.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Rentals__Payment__5441852A");

                    b.HasOne("ScooterDomain.Model.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__RiderId__5165187F");

                    b.HasOne("ScooterDomain.Model.Scooter", "Scooter")
                        .WithMany("Rentals")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__Scooter__52593CB8");

                    b.HasOne("ScooterDomain.Model.RentalStatus", "Status")
                        .WithMany("Rentals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__StatusI__534D60F1");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Rider");

                    b.Navigation("Scooter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", "ApplicationUser")
                        .WithOne("Rider")
                        .HasForeignKey("ScooterDomain.Model.Rider", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.HasOne("ScooterDomain.Model.ChargingStation", "Station")
                        .WithMany("Scooters")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Scooters__Statio__3F466844");

                    b.HasOne("ScooterDomain.Model.ScooterStatus", "Status")
                        .WithMany("Scooters")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Scooters__Status__3E52440B");

                    b.Navigation("Station");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Navigation("Rider")
                        .IsRequired();
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Navigation("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Navigation("Scooters");
                });
#pragma warning restore 612, 618
        }
    }
}


// ==== Migrations\ScootersContextModelSnapshot.cs ====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterInfrastructure;

#nullable disable

namespace ScooterInfrastructure.Migrations
{
    [DbContext(typeof(ScootersContext))]
    partial class ScootersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("RiderId", "DiscountId")
                        .HasName("PK__RiderDis__03319AB9DCE2EE60");

                    b.HasIndex("DiscountId");

                    b.ToTable("RiderDiscounts", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingSlots")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScooterCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Charging__3214EC0740E33A38");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("ScooterDomain.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07DFFA9BD7");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07BFE55B0F");

                    b.HasIndex(new[] { "Name" }, "UQ_PaymentMethods_Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.Property<int>("ScooterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Rentals__3214EC073B94991F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__RentalSt__3214EC07F11819E6");

                    b.HasIndex(new[] { "Name" }, "UQ_RentalStatuses_Name")
                        .IsUnique();

                    b.ToTable("RentalStatuses");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Rider__3214EC071A080A86");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Rider__85FB4E38D8C6C142")
                        .IsUnique();

                    b.ToTable("Rider", (string)null);
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Scooters__3214EC0705145E7D");

                    b.HasIndex("StationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ScooterS__3214EC073261A798");

                    b.HasIndex(new[] { "Name" }, "UQ_ScooterStatuses_Name")
                        .IsUnique();

                    b.ToTable("ScooterStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiderDiscount", b =>
                {
                    b.HasOne("ScooterDomain.Model.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Disco__48CFD27E");

                    b.HasOne("ScooterDomain.Model.Rider", null)
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RiderDisc__Rider__47DBAE45");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rental", b =>
                {
                    b.HasOne("ScooterDomain.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Rentals__Payment__5441852A");

                    b.HasOne("ScooterDomain.Model.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__RiderId__5165187F");

                    b.HasOne("ScooterDomain.Model.Scooter", "Scooter")
                        .WithMany("Rentals")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__Scooter__52593CB8");

                    b.HasOne("ScooterDomain.Model.RentalStatus", "Status")
                        .WithMany("Rentals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rentals__StatusI__534D60F1");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Rider");

                    b.Navigation("Scooter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.HasOne("ScooterDomain.Model.ApplicationUser", "ApplicationUser")
                        .WithOne("Rider")
                        .HasForeignKey("ScooterDomain.Model.Rider", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.HasOne("ScooterDomain.Model.ChargingStation", "Station")
                        .WithMany("Scooters")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Scooters__Statio__3F466844");

                    b.HasOne("ScooterDomain.Model.ScooterStatus", "Status")
                        .WithMany("Scooters")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Scooters__Status__3E52440B");

                    b.Navigation("Station");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ScooterDomain.Model.ApplicationUser", b =>
                {
                    b.Navigation("Rider")
                        .IsRequired();
                });

            modelBuilder.Entity("ScooterDomain.Model.ChargingStation", b =>
                {
                    b.Navigation("Scooters");
                });

            modelBuilder.Entity("ScooterDomain.Model.PaymentMethod", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.RentalStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Rider", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.Scooter", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ScooterDomain.Model.ScooterStatus", b =>
                {
                    b.Navigation("Scooters");
                });
#pragma warning restore 612, 618
        }
    }
}


// ==== Models\ErrorViewModel.cs ====
namespace ScooterInfrastructure.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}


// ==== Models\LoginViewModel.cs ====
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Models
{
    public class LoginViewModel
    {
        [Required(ErrorMessage = "Поле \"Email\" обов'язкове")]
        [EmailAddress(ErrorMessage = "Введіть коректний email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Поле \"Пароль\" обов'язкове")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Запам'ятати мене")]
        public bool RememberMe { get; set; }
    }
}

// ==== Models\RegisterViewModel.cs ====
using System.ComponentModel.DataAnnotations;

namespace ScooterInfrastructure.Models
{
    public class RegisterViewModel
    {
        [Required(ErrorMessage = "Поле \"Email\" обов'язкове")]
        [EmailAddress(ErrorMessage = "Введіть коректний email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Поле \"Пароль\" обов'язкове")]
        [DataType(DataType.Password)]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Пароль має бути від 8 до 100 символів")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Паролі не збігаються")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Поле \"Ім'я\" обов'язкове")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Ім'я має бути від 2 до 50 символів")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Поле \"Прізвище\" обов'язкове")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Прізвище має бути від 2 до 50 символів")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Поле \"Номер телефону\" обов'язкове")]
        [Phone(ErrorMessage = "Введіть коректний номер телефону")]
        public string PhoneNumber { get; set; }
    }
}

// ==== Views\_ViewImports.cshtml ====
@using ScooterInfrastructure
@using ScooterInfrastructure.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


// ==== Views\_ViewStart.cshtml ====
@{
    Layout = "_Layout";
}


// ==== Views\Account\Login.cshtml ====
@model ScooterInfrastructure.Models.LoginViewModel

@{
    ViewData["Title"] = "Вхід";
}

<h1>Вхід</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Login" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="RememberMe" /> @Html.DisplayNameFor(model => model.RememberMe)
                    </label>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Увійти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Account\Register.cshtml ====
@model ScooterInfrastructure.Models.RegisterViewModel

@{
    ViewData["Title"] = "Реєстрація";
}

<h1>Реєстрація</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Register" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConfirmPassword" class="control-label"></label>
                <input asp-for="ConfirmPassword" class="form-control" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зареєструватися" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\ChargingStations\Create.cshtml ====
@model ScooterDomain.Model.ChargingStation

@{
    ViewData["Title"] = "Додати станцію";
}

<h1>Додати станцію</h1>

<h4>Станція</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Назва</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label">Розташування</label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ChargingSlots" class="control-label">Кількість слотів</label>
                <input asp-for="ChargingSlots" class="form-control" />
                <span asp-validation-for="ChargingSlots" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CurrentScooterCount" class="control-label">Поточна кількість скутерів</label>
                <input asp-for="CurrentScooterCount" class="form-control" />
                <span asp-validation-for="CurrentScooterCount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\ChargingStations\Delete.cshtml ====
@model ScooterDomain.Model.ChargingStation

@{
    ViewData["Title"] = "Видалити станцію";
}

<h1>Видалити станцію</h1>

<h3>Ви впевнені, що хочете видалити цю станцію?</h3>
<div>
    <h4>Станція</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ChargingSlots)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ChargingSlots)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentScooterCount)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentScooterCount)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\ChargingStations\Details.cshtml ====
@model ScooterDomain.Model.ChargingStation

@{
    ViewData["Title"] = "Деталі станції";
}

<h1>Деталі станції</h1>

<div>
    <h4>Станція</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ChargingSlots)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ChargingSlots)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentScooterCount)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentScooterCount)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\ChargingStations\Edit.cshtml ====
@model ScooterDomain.Model.ChargingStation

@{
    ViewData["Title"] = "Редагувати станцію";
}

<h1>Редагувати станцію</h1>

<h4>Станція</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Назва</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label">Розташування</label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ChargingSlots" class="control-label">Кількість слотів</label>
                <input asp-for="ChargingSlots" class="form-control" />
                <span asp-validation-for="ChargingSlots" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CurrentScooterCount" class="control-label">Поточна кількість скутерів</label>
                <input asp-for="CurrentScooterCount" class="form-control" />
                <span asp-validation-for="CurrentScooterCount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\ChargingStations\Index.cshtml ====
@model IEnumerable<ScooterDomain.Model.ChargingStation>

@{
    ViewData["Title"] = "Станції зарядки";
}

<h1>Станції зарядки</h1>

<p>
    <a asp-action="Create">Додати нову станцію</a>
</p>



<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ChargingSlots)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CurrentScooterCount)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ChargingSlots)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentScooterCount)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
 
}

// ==== Views\Discounts\Create.cshtml ====
@model ScooterDomain.Model.Discount

@{
    ViewData["Title"] = "Додати знижку";
}

<h1>Додати знижку</h1>

<h4>Знижка</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Назва</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Percentage" class="control-label">Відсоток знижки</label>
                <input asp-for="Percentage" class="form-control" type="number" />
                <span asp-validation-for="Percentage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Опис</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Discounts\Delete.cshtml ====
@model ScooterDomain.Model.Discount

@{
    ViewData["Title"] = "Видалити знижку";
}

<h1>Видалити знижку</h1>

<h3>Ви впевнені, що хочете видалити цю знижку?</h3>
<div>
    <h4>Знижка</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Percentage)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Percentage)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Discounts\Details.cshtml ====
@model ScooterDomain.Model.Discount

@{
    ViewData["Title"] = "Деталі знижки";
}

<h1>Деталі знижки</h1>

<div>
    <h4>Знижка</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Percentage)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Percentage)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\Discounts\Edit.cshtml ====
@model ScooterDomain.Model.Discount

@{
    ViewData["Title"] = "Редагувати знижку";
}

<h1>Редагувати знижку</h1>

<h4>Знижка</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label">Назва</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Percentage" class="control-label">Відсоток знижки</label>
                <input asp-for="Percentage" class="form-control" type="number" />
                <span asp-validation-for="Percentage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Опис</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Discounts\Index.cshtml ====
@model IEnumerable<ScooterDomain.Model.Discount>

@{
    ViewData["Title"] = "Знижки";
}

<h1>Знижки</h1>

<p>
    <a asp-action="Create">Додати нову знижку</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Percentage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Percentage)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Home\Index.cshtml ====
@inject ScootersContext Context
@{
    ViewData["Title"] = "Головна";
}

<div class="text-center animate__animated animate__fadeIn">
    <h1 class="display-4">Ласкаво просимо до сервісу оренди самокатів!</h1>
    <p class="lead">Орендуйте самокати швидко, зручно та безпечно.</p>
</div>

<!-- Статистика -->
<div class="row mt-5">
    <div class="col-md-4">
        <div class="card text-white bg-primary mb-3">
            <div class="card-header">Доступні самокати</div>
            <div class="card-body">
                <h5 class="card-title">@ViewBag.AvailableScooters</h5>
                <p class="card-text">Самокати готові до оренди.</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-success mb-3">
            <div class="card-header">Станції зарядки</div>
            <div class="card-body">
                <h5 class="card-title">@ViewBag.ChargingStationsCount</h5>
                <p class="card-text">Станцій доступно для зарядки.</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-warning mb-3">
            <div class="card-header">Активні оренди</div>
            <div class="card-body">
                <h5 class="card-title">@ViewBag.ActiveRentals</h5>
                <p class="card-text">Оренд активних зараз.</p>
            </div>
        </div>
    </div>
</div>

<!-- Швидкий доступ -->
<div class="row mt-5 text-center">
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Переглянути самокати</h5>
                <p class="card-text">Ознайомтеся з нашим парком самокатів.</p>
                <a asp-controller="Scooters" asp-action="Index" class="btn btn-primary">Переглянути</a>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Орендувати самокат</h5>
                <p class="card-text">Швидко та зручно орендуйте скутер.</p>
                <a asp-controller="Rentals" asp-action="Create" class="btn btn-primary">Орендувати</a>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Станції зарядки</h5>
                <p class="card-text">Знайдіть найближчу станцію зарядки.</p>
                <a asp-controller="ChargingStations" asp-action="Index" class="btn btn-primary">Переглянути</a>
            </div>
        </div>
    </div>
</div>

<!-- Діаграми -->
<div class="row mt-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">Розподіл самокатів за статусами</div>
            <div class="card-body">
                <div id="scootersByStatusChart" style="width: 100%; height: 400px;"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-success text-white">Самокати на станціях зарядки</div>
            <div class="card-body">
                <div id="scootersByStationChart" style="width: 100%; height: 400px;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Відгуки -->
<div class="row mt-5">
    <div class="col-md-12">
        <h2>Відгуки наших клієнтів</h2>
        <div id="reviewsCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <blockquote class="blockquote">
                        <p>Чудовий сервіс! Самокати завжди в хорошому стані, орендувати дуже зручно.</p>
                        <footer class="blockquote-footer">Іван Петренко</footer>
                    </blockquote>
                </div>
                <div class="carousel-item">
                    <blockquote class="blockquote">
                        <p>Дуже сподобалася швидкість обслуговування. Рекомендую!</p>
                        <footer class="blockquote-footer">Олена Сидорова</footer>
                    </blockquote>
                </div>
                <div class="carousel-item">
                    <blockquote class="blockquote">
                        <p>Зручний додаток, завжди знаходжу самокат поруч.</p>
                        <footer class="blockquote-footer">Андрій Коваленко</footer>
                    </blockquote>
                </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#reviewsCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Попередній</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#reviewsCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Наступний</span>
            </button>
        </div>
    </div>
</div>

<div class="row mt-5">
    <div class="col-md-12">
        <h2>Контакти</h2>
        <p>Якщо у вас виникли питання, зв'яжіться з нами:</p>
        <ul class="list-unstyled">
            <li><i class="fas fa-phone"></i> Телефон: +380 123 456 789</li>
            <li><i class="fas fa-envelope"></i> Email: support@scooter-rental.com</li>
            <li><i class="fas fa-map-marker-alt"></i> Адреса: м. Київ, вул. Скутерна, 10</li>
        </ul>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            // Діаграма 1: Самокати за статусами (кругова діаграма)
            fetch('/api/charts/scootersByStatus')
                .then(response => response.json())
                .then(data => {
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Статус');
                    dataTable.addColumn('number', 'Кількість');
                    data.forEach(item => {
                        dataTable.addRow([item.status, item.count]);
                    });

                    var options = {
                        title: 'Розподіл самокатів за статусами',
                        pieHole: 0.4, // Стиль "пончика"
                        width: '100%',
                        height: 400,
                        colors: ['#3498db', '#2ecc71', '#e74c3c'], // Кастомні кольори (синій, зелений, червоний)
                        chartArea: { width: '80%', height: '70%' }, // Збільшуємо область діаграми
                        legend: { position: 'right', textStyle: { fontSize: 14 } }, // Легенда справа
                        animation: { startup: true, duration: 1000, easing: 'out' } // Анімація
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('scootersByStatusChart'));
                    chart.draw(dataTable, options);
                })
                .catch(error => console.error('Помилка завантаження даних:', error));

            // Діаграма 2: Самокати на станціях (стовпчикова діаграма)
            fetch('/api/charts/scootersByStation')
                .then(response => response.json())
                .then(data => {
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Станція');
                    dataTable.addColumn('number', 'Кількість');
                    data.forEach(item => {
                        dataTable.addRow([item.stationName, item.count]);
                    });

                    var options = {
                        title: 'Кількість самокатів на станціях',
                        width: '100%',
                        height: 400,
                        colors: ['#3498db'], // Синій колір для стовпчиків
                        bar: { groupWidth: '50%' }, // Товщина стовпчиків
                        chartArea: { width: '70%', height: '70%' }, // Збільшуємо область
                        legend: { position: 'none' }, // Без легенди
                        hAxis: { textStyle: { fontSize: 12 }, slantedText: true, slantedTextAngle: 45 }, // Нахилені підписи
                        vAxis: { minValue: 0, gridlines: { color: '#ddd' } }, // Сітка
                        animation: { startup: true, duration: 1000, easing: 'out' } // Анімація
                    };

                    var chart = new google.visualization.ColumnChart(document.getElementById('scootersByStationChart'));
                    chart.draw(dataTable, options);
                })
                .catch(error => console.error('Помилка завантаження даних:', error));
        }
    </script>
}

// ==== Views\Home\Privacy.cshtml ====
@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>


// ==== Views\Rentals\Create.cshtml ====
@model ScooterDomain.Model.Rental

@{
    ViewData["Title"] = "Додати оренду";
}

<h1>Додати оренду</h1>

<h4>Оренда</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="RiderId" class="control-label">Користувач</label>
                <select asp-for="RiderId" class="form-control" asp-items="ViewBag.RiderId"></select>
            </div>
            <div class="form-group">
                <label asp-for="ScooterId" class="control-label">Скутер</label>
                <select asp-for="ScooterId" class="form-control" asp-items="ViewBag.ScooterId"></select>
            </div>
            <div class="form-group">
                <label asp-for="StatusId" class="control-label">Статус</label>
                <select asp-for="StatusId" class="form-control" asp-items="ViewBag.StatusId"></select>
            </div>
            <div class="form-group">
                <label asp-for="StartTime" class="control-label">Час початку</label>
                <input asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndTime" class="control-label">Час завершення</label>
                <input asp-for="EndTime" class="form-control" />
                <span asp-validation-for="EndTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalCost" class="control-label">Загальна вартість</label>
                <input asp-for="TotalCost" class="form-control" type="number" />
                <span asp-validation-for="TotalCost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentDate" class="control-label">Дата оплати</label>
                <input asp-for="PaymentDate" class="form-control" />
                <span asp-validation-for="PaymentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label">Сума оплати</label>
                <input asp-for="Amount" class="form-control" type="number" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentMethodId" class="control-label">Спосіб оплати</label>
                <select asp-for="PaymentMethodId" class="form-control" asp-items="ViewBag.PaymentMethodId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Rentals\Delete.cshtml ====
@model ScooterDomain.Model.Rental

@{
    ViewData["Title"] = "Видалити оренду";
}

<h1>Видалити оренду</h1>

<h3>Ви впевнені, що хочете видалити цю оренду?</h3>
<div>
    <h4>Оренда</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.StartTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.StartTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.EndTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.EndTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalCost)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TotalCost)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PaymentDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PaymentDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Amount)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Amount)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PaymentMethod)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PaymentMethod.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Rider)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Rider.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Scooter)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Scooter.Model)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status.Name)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Rentals\Details.cshtml ====
@model ScooterDomain.Model.Rental

@{
    ViewData["Title"] = "Деталі оренди";
}

<h1>Деталі оренди</h1>

<div>
    <h4>Оренда</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.StartTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.StartTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.EndTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.EndTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalCost)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TotalCost)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PaymentDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PaymentDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Amount)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Amount)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PaymentMethod)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PaymentMethod.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Rider)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Rider.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Scooter)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Scooter.Model)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status.Name)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\Rentals\Edit.cshtml ====
@model ScooterDomain.Model.Rental

@{
    ViewData["Title"] = "Редагувати оренду";
}

<h1>Редагувати оренду</h1>

<h4>Оренда</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="RiderId" class="control-label">Користувач</label>
                <select asp-for="RiderId" class="form-control" asp-items="ViewBag.RiderId"></select>
                <span asp-validation-for="RiderId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ScooterId" class="control-label">Скутер</label>
                <select asp-for="ScooterId" class="form-control" asp-items="ViewBag.ScooterId"></select>
                <span asp-validation-for="ScooterId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StatusId" class="control-label">Статус</label>
                <select asp-for="StatusId" class="form-control" asp-items="ViewBag.StatusId"></select>
                <span asp-validation-for="StatusId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartTime" class="control-label">Час початку</label>
                <input asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndTime" class="control-label">Час завершення</label>
                <input asp-for="EndTime" class="form-control" />
                <span asp-validation-for="EndTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalCost" class="control-label">Загальна вартість</label>
                <input asp-for="TotalCost" class="form-control" type="number" />
                <span asp-validation-for="TotalCost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentDate" class="control-label">Дата оплати</label>
                <input asp-for="PaymentDate" class="form-control" />
                <span asp-validation-for="PaymentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label">Сума оплати</label>
                <input asp-for="Amount" class="form-control" type="number" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentMethodId" class="control-label">Спосіб оплати</label>
                <select asp-for="PaymentMethodId" class="form-control" asp-items="ViewBag.PaymentMethodId"></select>
                <span asp-validation-for="PaymentMethodId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Rentals\Index.cshtml ====
@model IEnumerable<ScooterDomain.Model.Rental>

@{
    ViewData["Title"] = "Оренди";
}

<h1>Оренди</h1>

<p>
    <a asp-action="Create">Додати нову оренду</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.StartTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalCost)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PaymentDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Amount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PaymentMethod)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Rider)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Scooter)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.StartTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalCost)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentMethod.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rider.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Scooter.Model)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status.Name)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Reports\Index.cshtml ====
@model dynamic
@{
    ViewData["Title"] = "Звіти";
}

<h1>Управління звітами</h1>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">Імпорт даних</div>
            <div class="card-body">
                <h5>З Excel</h5>
                <form asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control" id="tableSelectImportExcel" onchange="filterImportForm('ImportExcel')">
                            <option value="ChargingStations">Станції</option>
                            <option value="Scooters">Скутери</option>
                            <option value="Riders">Користувачі</option>
                            <option value="Discounts">Знижки</option>
                            <option value="Rentals">Оренди</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".xlsx" />
                    </div>
                    <div id="importExcelFilters" style="display:none;">
                        <!-- Фільтри для Scooters -->
                        <div id="scooterImportFilter" style="display:none;">
                            <label>Фільтр за статусом (для Скутерів):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Доступний</option>
                                <option value="2">Зайнятий</option>
                                <option value="3">На зарядці</option>
                            </select>
                        </div>
                        <!-- Фільтри для Riders -->
                     
                        <!-- Фільтри для Rentals -->
                        <div id="rentalImportFilter" style="display:none;">
                            <label>Фільтр за статусом (для Оренд):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Активна</option>
                                <option value="2">Завершена</option>
                                <option value="3">Скасована</option>
                            </select>
                            
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Імпортувати</button>
                </form>

                <hr>

                <h5>З Word</h5>
                <form asp-action="ImportDocx" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control" id="tableSelectImportDocx" onchange="filterImportForm('ImportDocx')">
                            <option value="ChargingStations">Станції</option>
                            <option value="Scooters">Скутери</option>
                            <option value="Riders">Користувачі</option>
                            <option value="Discounts">Знижки</option>
                            <option value="Rentals">Оренди</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".docx" />
                    </div>
                    <div id="importDocxFilters" style="display:none;">
                        <!-- Фільтри для Scooters -->
                        <div id="scooterImportDocxFilter" style="display:none;">
                            <label>Фільтр за статусом (для Скутерів):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Доступний</option>
                                <option value="2">Зайнятий</option>
                                <option value="3">На зарядці</option>
                            </select>
                        </div>
                        <!-- Фільтри для Riders -->
                        
                        <!-- Фільтри для Rentals -->
                        <div id="rentalImportDocxFilter" style="display:none;">
                            <label>Фільтр за статусом (для Оренд):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Активна</option>
                                <option value="2">Завершена</option>
                                <option value="3">Скасована</option>
                            </select>
                       
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Імпортувати</button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-success text-white">Експорт даних</div>
            <div class="card-body">
                <h5>В Excel</h5>
                <form asp-action="ExportExcel" method="get">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control" id="tableSelectExportExcel" onchange="filterExportForm('ExportExcel')">
                            <option value="ChargingStations">Станції</option>
                            <option value="Scooters">Скутери</option>
                            <option value="Riders">Користувачі</option>
                            <option value="Discounts">Знижки</option>
                            <option value="Rentals">Оренди</option>
                        </select>
                    </div>
                    <div id="exportExcelFilters" style="display:none;">
                        <!-- Фільтри для Scooters -->
                        <div id="scooterExportFilter" style="display:none;">
                            <label>Фільтр за статусом (для Скутерів):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Доступний</option>
                                <option value="2">Зайнятий</option>
                                <option value="3">На зарядці</option>
                            </select>
                        </div>
                        <!-- Фільтри для Riders -->
                       
                        <!-- Фільтри для Rentals -->
                        <div id="rentalExportFilter" style="display:none;">
                            <label>Фільтр за статусом (для Оренд):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Активна</option>
                                <option value="2">Завершена</option>
                                <option value="3">Скасована</option>
                            </select>
                          
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success">Експортувати</button>
                </form>

                <hr>

                <h5>В Word</h5>
                <form asp-action="ExportDocx" method="get">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control" id="tableSelectExportDocx" onchange="filterExportForm('ExportDocx')">
                            <option value="ChargingStations">Станції</option>
                            <option value="Scooters">Скутери</option>
                            <option value="Riders">Користувачі</option>
                            <option value="Discounts">Знижки</option>
                            <option value="Rentals">Оренди</option>
                        </select>
                    </div>
                    <div id="exportDocxFilters" style="display:none;">
                        <!-- Фільтри для Scooters -->
                        <div id="scooterExportDocxFilter" style="display:none;">
                            <label>Фільтр за статусом (для Скутерів):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Доступний</option>
                                <option value="2">Зайнятий</option>
                                <option value="3">На зарядці</option>
                            </select>
                        </div>
                        <!-- Фільтри для Riders -->
                       
                        <!-- Фільтри для Rentals -->
                        <div id="rentalExportDocxFilter" style="display:none;">
                            <label>Фільтр за статусом (для Оренд):</label>
                            <select name="statusId" class="form-control">
                                <option value="">Всі</option>
                                <option value="1">Активна</option>
                                <option value="2">Завершена</option>
                                <option value="3">Скасована</option>
                            </select>
                            
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success">Експортувати</button>
                </form>
            </div>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger mt-3">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

@section Scripts {
    <script>
        function filterImportForm(formType) {
            var tableSelect = document.getElementById(formType === 'ImportExcel' ? 'tableSelectImportExcel' : 'tableSelectImportDocx');
            var selectedTable = tableSelect.value;
            var filtersDiv = document.getElementById(formType === 'ImportExcel' ? 'importExcelFilters' : 'importDocxFilters');

            // Приховуємо всі фільтри
            document.querySelectorAll('#' + (formType === 'ImportExcel' ? 'importExcelFilters' : 'importDocxFilters') + ' > div').forEach(function(filter) {
                filter.style.display = 'none';
            });

            // Показуємо відповідні фільтри залежно від вибраної таблиці
            if (selectedTable === 'Scooters') {
                document.getElementById(formType === 'ImportExcel' ? 'scooterImportFilter' : 'scooterImportDocxFilter').style.display = 'block';
            } else if (selectedTable === 'Riders') {
                document.getElementById(formType === 'ImportExcel' ? 'riderImportFilter' : 'riderImportDocxFilter').style.display = 'block';
            } else if (selectedTable === 'Rentals') {
                document.getElementById(formType === 'ImportExcel' ? 'rentalImportFilter' : 'rentalImportDocxFilter').style.display = 'block';
            }

            // Показуємо блок фільтрів, якщо є що показати
            filtersDiv.style.display = (selectedTable === 'ChargingStations' || selectedTable === 'Discounts') ? 'none' : 'block';
        }

        function filterExportForm(formType) {
            var tableSelect = document.getElementById(formType === 'ExportExcel' ? 'tableSelectExportExcel' : 'tableSelectExportDocx');
            var selectedTable = tableSelect.value;
            var filtersDiv = document.getElementById(formType === 'ExportExcel' ? 'exportExcelFilters' : 'exportDocxFilters');

            // Приховуємо всі фільтри
            document.querySelectorAll('#' + (formType === 'ExportExcel' ? 'exportExcelFilters' : 'exportDocxFilters') + ' > div').forEach(function(filter) {
                filter.style.display = 'none';
            });

            // Показуємо відповідні фільтри залежно від вибраної таблиці
            if (selectedTable === 'Scooters') {
                document.getElementById(formType === 'ExportExcel' ? 'scooterExportFilter' : 'scooterExportDocxFilter').style.display = 'block';
            } else if (selectedTable === 'Riders') {
                document.getElementById(formType === 'ExportExcel' ? 'riderExportFilter' : 'riderExportDocxFilter').style.display = 'block';
            } else if (selectedTable === 'Rentals') {
                document.getElementById(formType === 'ExportExcel' ? 'rentalExportFilter' : 'rentalExportDocxFilter').style.display = 'block';
            }

            // Показуємо блок фільтрів, якщо є що показати
            filtersDiv.style.display = (selectedTable === 'ChargingStations' || selectedTable === 'Discounts') ? 'none' : 'block';
        }

        // Ініціалізація фільтрів при завантаженні сторінки
        window.onload = function() {
            filterImportForm('ImportExcel');
            filterImportForm('ImportDocx');
            filterExportForm('ExportExcel');
            filterExportForm('ExportDocx');
        };
    </script>
}

// ==== Views\Riders\Create.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Додати користувача";
}

<h1>Додати користувача</h1>

<h4>Користувач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label">Ім'я</label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label">Прізвище</label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label">Номер телефону</label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RegistrationDate" class="control-label">Дата реєстрації</label>
                <input asp-for="RegistrationDate" class="form-control" />
                <span asp-validation-for="RegistrationDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AccountBalance" class="control-label">Баланс рахунку</label>
                <input asp-for="AccountBalance" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="AccountBalance" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Riders\Delete.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Видалити користувача";
}

<h1>Видалити користувача</h1>

<h3>Ви впевнені, що хочете видалити цього користувача?</h3>
<div>
    <h4>Користувач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.RegistrationDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.RegistrationDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AccountBalance)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AccountBalance)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Riders\Details.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Деталі користувача";
}

<h1>Деталі користувача</h1>

<div>
    <h4>Користувач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.RegistrationDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.RegistrationDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AccountBalance)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AccountBalance)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>
<!-- Додайте цей блок у кінець файлу Details.cshtml -->
<div class="mt-3">
    <h4>Знижки</h4>
    <a asp-action="Discounts" asp-route-id="@Model.Id" class="btn btn-info">Переглянути знижки</a>
</div>

// ==== Views\Riders\Discounts.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Знижки користувача";
}

<h1>Знижки для @Model.FirstName @Model.LastName</h1>

@if (Model.Discounts.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Назва</th>
                <th>Відсоток</th>
                <th>Опис</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var discount in Model.Discounts)
            {
                <tr>
                    <td>@discount.Name</td>
                    <td>@discount.Percentage%</td>
                    <td>@discount.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info">У цього користувача немає активних знижок.</div>
}

<div>
    <a asp-action="Details" asp-route-id="@Model.Id">Назад до профілю</a>
</div>

// ==== Views\Riders\Edit.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Редагувати користувача";
}

<h1>Редагувати користувача</h1>

<h4>Користувач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="FirstName" class="control-label">Ім'я</label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label">Прізвище</label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label">Номер телефону</label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RegistrationDate" class="control-label">Дата реєстрації</label>
                <input asp-for="RegistrationDate" class="form-control" />
                <span asp-validation-for="RegistrationDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AccountBalance" class="control-label">Баланс рахунку</label>
                <input asp-for="AccountBalance" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="AccountBalance" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Riders\Index.cshtml ====
@model IEnumerable<ScooterDomain.Model.Rider>

@{
    ViewData["Title"] = "Користувачі";
}

<h1>Користувачі</h1>

<p>
    <a asp-action="Create">Додати нового користувача</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RegistrationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AccountBalance)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegistrationDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AccountBalance)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a> |
                    <a asp-action="ManageDiscounts" asp-route-id="@item.Id">Знижки</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Riders\ManageDiscounts.cshtml ====
@model ScooterDomain.Model.Rider

@{
    ViewData["Title"] = "Управління знижками";
}

<h1>Управління знижками для @Model.FirstName @Model.LastName</h1>

<h4>Поточні знижки</h4>
@if (Model.Discounts.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Назва</th>
                <th>Відсоток</th>
                <th>Опис</th>
                <th>Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var discount in Model.Discounts)
            {
                <tr>
                    <td>@discount.Name</td>
                    <td>@discount.Percentage%</td>
                    <td>@discount.Description</td>
                    <td>
                        <form asp-action="RemoveDiscount" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <input type="hidden" name="discountId" value="@discount.Id" />
                            <button type="submit" class="btn btn-danger btn-sm">Видалити</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>У цього користувача поки немає знижок.</p>
}

<h4>Додати нову знижку</h4>
<form asp-action="ManageDiscounts" method="post">
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label class="control-label">Виберіть знижку</label>
        <select name="discountId" class="form-control" asp-items="ViewBag.AvailableDiscounts"></select>
    </div>
    <div class="form-group">
        <input type="submit" value="Додати" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index">Повернутися до списку користувачів</a>
</div>

// ==== Views\Scooters\Create.cshtml ====
@model ScooterDomain.Model.Scooter

@{
    ViewData["Title"] = "Додати скутер";
}

<h1>Додати скутер</h1>

<h4>Скутер</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Model" class="control-label">Модель</label>
                <input asp-for="Model" class="form-control" />
                <span asp-validation-for="Model" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BatteryLevel" class="control-label">Рівень батареї</label>
                <input asp-for="BatteryLevel" class="form-control" />
                <span asp-validation-for="BatteryLevel" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StatusId" class="control-label">Статус</label>
                <select asp-for="StatusId" class="form-control" asp-items="ViewBag.StatusId"></select>
            </div>
            <div class="form-group">
                <label asp-for="CurrentLocation" class="control-label">Поточне розташування</label>
                <input asp-for="CurrentLocation" class="form-control" />
                <span asp-validation-for="CurrentLocation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StationId" class="control-label">Станція</label>
                <select asp-for="StationId" class="form-control" asp-items="ViewBag.StationId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Scooters\Delete.cshtml ====
@model ScooterDomain.Model.Scooter

@{
    ViewData["Title"] = "Видалити скутер";
}

<h1>Видалити скутер</h1>

<h3>Ви впевнені, що хочете видалити цей скутер?</h3>
<div>
    <h4>Скутер</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Model)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Model)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.BatteryLevel)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.BatteryLevel)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentLocation)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentLocation)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Station)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Station.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status.Name)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Scooters\Details.cshtml ====
@model ScooterDomain.Model.Scooter

@{
    ViewData["Title"] = "Деталі скутера";
}

<h1>Деталі скутера</h1>

<div>
    <h4>Скутер</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Model)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Model)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.BatteryLevel)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.BatteryLevel)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentLocation)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentLocation)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Station)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Station.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status.Name)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\Scooters\Edit.cshtml ====
@model ScooterDomain.Model.Scooter

@{
    ViewData["Title"] = "Редагувати скутер";
}

<h1>Редагувати скутер</h1>

<h4>Скутер</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Model" class="control-label">Модель</label>
                <input asp-for="Model" class="form-control" />
                <span asp-validation-for="Model" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BatteryLevel" class="control-label">Рівень батареї</label>
                <input asp-for="BatteryLevel" class="form-control" />
                <span asp-validation-for="BatteryLevel" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StatusId" class="control-label">Статус</label>
                <select asp-for="StatusId" class="form-control" asp-items="ViewBag.StatusId"></select>
                <span asp-validation-for="StatusId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CurrentLocation" class="control-label">Поточне розташування</label>
                <input asp-for="CurrentLocation" class="form-control" />
                <span asp-validation-for="CurrentLocation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StationId" class="control-label">Станція</label>
                <select asp-for="StationId" class="form-control" asp-items="ViewBag.StationId"></select>
                <span asp-validation-for="StationId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Scooters\Index.cshtml ====
@model IEnumerable<ScooterDomain.Model.Scooter>

@{
    ViewData["Title"] = "Скутери";
}

<h1>Скутери</h1>

<p>
    <a asp-action="Create">Додати новий скутер</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Model)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BatteryLevel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CurrentLocation)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Station)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Model)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BatteryLevel)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentLocation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Station.Location)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status.Name)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Shared\Error.cshtml ====
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>


// ==== Views\Shared\_Layout.cshtml ====
<!-- ScooterInfrastructure\Views\Shared\_Layout.cshtml -->
@using System.Security.Claims
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ScooterInfrastructure</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body class="d-flex flex-column min-vh-100">
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <div class="container">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">Scooter Rental</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="Home" asp-action="Index">Головна</a>
                            </li>
                            @if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Scooters" asp-action="Index">Скутери</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Riders" asp-action="Index">Користувачі</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="ChargingStations" asp-action="Index">Станції</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Discounts" asp-action="Index">Знижки</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Reports" asp-action="Index">Звіти</a>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Scooters" asp-action="Index">Скутери</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Rentals" asp-action="Index">Оренди</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Riders" asp-action="Profile">Профіль</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Discounts" asp-action="Index">Знижки</a>
                                </li>
                            }
                            <li class="nav-item">
                                <span class="nav-link text-light">Вітаємо, @User.Identity.Name!</span>
                            </li>
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post" class="form-inline">
                                    <button type="submit" class="nav-link btn btn-link text-light">Вихід</button>
                                </form>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="Account" asp-action="Login">Вхід</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="Account" asp-action="Register">Реєстрація</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="flex-grow-1">
        <div class="container">
            @RenderBody()
        </div>
    </main>

    <footer class="footer bg-primary text-white text-center py-3">
        <div class="container">
            <p>© 2025 - ScooterInfrastructure - <a asp-controller="Home" asp-action="Privacy" class="text-decoration-none text-info">Privacy</a></p>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

// ==== Views\Shared\_Layout.cshtml.css ====
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}


// ==== Views\Shared\_ValidationScriptsPartial.cshtml ====
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


// ==== wwwroot\css\site.css ====
/* �������� ���� */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Roboto', Arial, sans-serif;
    background-color: #f8f9fa;
    color: #2c3e50;
    display: flex;
    flex-direction: column;
    min-height: 100vh; /* ��������� ��������� ������ ������ */
}

/* ������������, �� ����� ������ ����� */
main {
    flex-grow: 1; /* �������� ���� ����������� */
}

.footer {
    flex-shrink: 0; /* ����� �� ���������� */
    width: 100%;
    background: linear-gradient(90deg, #2c3e50, #3498db);
    color: #ecf0f1;
    padding: 20px 0;
    border-top: 4px solid #1abc9c;
    text-align: center;
}

/* �������� */
.navbar {
    background: linear-gradient(90deg, #2c3e50, #3498db);
    padding: 15px 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.navbar-brand {
    font-size: 24px;
    font-weight: bold;
    color: #ecf0f1 !important;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.nav-link {
    color: #ecf0f1 !important;
    font-size: 16px;
    margin-left: 20px;
    transition: color 0.3s ease, transform 0.2s ease;
}

    .nav-link:hover {
        color: #1abc9c !important;
        transform: translateY(-2px);
    }

/* ��������� */
.container {
    max-width: 1200px;
    padding: 20px;
    margin: 0 auto;
}

/* ��������� */
h1 {
    font-size: 32px;
    color: #2c3e50;
    margin-bottom: 20px;
    text-align: center;
    font-weight: 700;
}

h4 {
    color: #3498db;
    font-size: 22px;
    margin-bottom: 15px;
}

/* ������ */
.btn-primary {
    background-color: #1abc9c;
    border-color: #1abc9c;
    padding: 10px 20px;
    border-radius: 25px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

    .btn-primary:hover {
        background-color: #16a085;
        border-color: #16a085;
        transform: scale(1.05);
    }

.btn-danger {
    background-color: #e74c3c;
    border-color: #e74c3c;
    border-radius: 25px;
}

    .btn-danger:hover {
        background-color: #c0392b;
        border-color: #c0392b;
    }

/* ������� */
.table {
    background-color: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    width: 100%;
    margin: 20px 0;
}

    .table th {
        background-color: #3498db;
        color: #fff;
        padding: 15px;
        font-weight: 600;
        text-align: left;
    }

    .table td {
        padding: 15px;
        vertical-align: middle;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .table tr:hover {
        background-color: #ecf0f1;
        transition: background-color 0.2s ease;
    }

/* ����� */
.form-group {
    margin-bottom: 20px;
}

    .form-group label {
        font-weight: 500;
        color: #2c3e50;
    }

.form-control {
    border-radius: 8px;
    border: 1px solid #bdc3c7;
    padding: 10px;
    transition: border-color 0.3s ease;
}

    .form-control:focus {
        border-color: #1abc9c;
        box-shadow: 0 0 5px rgba(26, 188, 156, 0.3);
    }

.text-danger {
    font-size: 14px;
    margin-top: 5px;
    color: #e74c3c;
}

.footer a {
    color: #1abc9c;
    text-decoration: none;
    transition: color 0.3s ease;
}

    .footer a:hover {
        color: #16a085;
    }

/* ����� (���������������� �� �������� �������) */
.card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

    .card:hover {
        transform: translateY(-5px);
    }

.card-header {
    font-weight: 600;
    font-size: 18px;
}

.card-title {
    color: #2c3e50;
}

/* �������� (��������������� ��� ������) */
.carousel-inner {
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

blockquote {
    font-style: italic;
    color: #7f8c8d;
}

/* �������� (������ �� ������) */
.list-unstyled li {
    margin-bottom: 10px;
    font-size: 16px;
}

.list-unstyled i {
    margin-right: 10px;
    color: #1abc9c;
}

/* �������� */
@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

.container, .navbar, .footer {
    animation: fadeIn 1s ease-in;
}

/* �������� ���� */
p {
    margin-bottom: 15px;
}

a {
    color: #3498db;
    text-decoration: none;
}

    a:hover {
        text-decoration: underline;
    }


// ==== wwwroot\js\site.js ====
$(document).ready(function () {
    // Перевизначаємо метод валідації чисел
    $.validator.methods.number = function (value, element) {
        // Дозволяємо як кому, так і крапку як роздільник
        return this.optional(element) || !isNaN(parseFloat(value.replace(',', '.')));
    };

    // Оновлюємо правила валідації для всіх форм
    $.validator.unobtrusive.parse();
});

